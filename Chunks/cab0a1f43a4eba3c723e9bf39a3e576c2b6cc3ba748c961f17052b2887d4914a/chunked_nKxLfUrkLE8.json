[
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_0",
        "text": "Hey there. How's it going everybody? In this video, we're gonna continue learning about Matplotlib and seeing how to create some different types of charts. Specifically, we're gonna be looking at bar charts in this video. We're also gonna see how to load in data from a CSV instead of just having our data directly within our Python script because most likely when you're plotting data, the data is gonna be coming from another source like a CSV file. Now I would like to mention that we do have a sponsor for this series of videos and that is brilliant.org. So I really wanna thank Brilliant for sponsoring the series, and it would be great if you all could check them out using the link in the description section below and support the sponsors. And I'll talk more about their services in just a bit. So with that said, let's go ahead and get started. Okay. So in the last video, we learned the basics of matplotlib and how to plot some data and customize our plots in different ways"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_1",
        "text": ". I have a stripped down version of the code that we wrote in that video opened up here in my editor, and I'll have a link to this code in the description section below if you'd like to follow along. But just in case you're not continuing from a previous video, let me go over this code really quick. So first, we are importing, plot up here at the top, pyplot from matplotlib. We are using a 538 style for our plots. Our ages here, this is our x axis. It's just a list of numbers. Dev y, this is the values that are gonna be on our y axis. And here, we are plotting out that data. So we're plotting out, our x values, which are the ages, the y values, which is our dev y here. We're giving it a custom color and a label, and I've got some commented out code right here. All of this data is median salaries for different ages. So this is for developers in general. This is for Python developers here. This is for JavaScript developers here. But I've got those commented out for now"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_2",
        "text": ". We are also, putting a legend on our plot, giving it a title, x and y label, giving it a tight layout which just helps with the padding, and then lastly, we are showing it. So when we plotted our data in the last video, we used this plt dot plot method. And when you use the plot method, it will use a line plot by default. So if we run this, then we'll see something kinda similar to what we saw at the end of the last video. So we can see that we get a line plot here for the median salary of developers. And, again, this is some data that I took from the annual Stack Overflow developer survey. But let's say that we wanted to show this as a bar chart instead. Well, to do that, we can simply use the bar method instead of the plot method. So if I just change this to use bar instead of plot, then we'll have a bar method or a bar plot. Sorry. And just like that plot method, we can pass in our x values first for our x values and the y values for our y axis"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_3",
        "text": ". And additional parameters here can be passed in as well, like color and label. So I'm just going to leave that as is, just like it was with the plot method. And if I run this, then we can see that now this is plotting our data and it's represented as a bar chart instead. Okay. So that is plotting the data for all developers who answered the survey. So like I said, I also have the data for Python and JavaScript developers as well. And right now, those are commented out. So what if I wanted to include those in our bar chart? Well, first of all, you can mix and match some plots. So if for some reason you wanted the Python and JavaScript data to remain as line plots and just overlay that onto our bar chart, then we could simply uncomment out our code here and we could just run these as plots and that will actually overlay, line plots on top of our bar plot. Now that doesn't make much sense in this situation but depending on your data, you might find that useful. Okay"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_4",
        "text": ". But what if we wanted to include these in our bar chart as bars side by side with the other data? So you might think that we, could do this just like we did our line plots and just run those using the bar method as well. But that's actually gonna give us some issues. So let's try that real quick and see what that does. So I'm gonna change these to use bar, so plt.bar. So I'm going to run that, and we can see that this doesn't quite look right. We can't even see the data for all of the developers, and the data for Python and JavaScript is overlapping. So how can we put these side by side? Because right now, they're just all stacked on top of each other. So we can do this by offsetting the x values each time we plot some data. Now I actually think this is a lot harder than it should be. It seems a bit hacky in my opinion, but this is just how we have to do it. So to do this, we're gonna have to import NumPy and use that to grab a range of values for our x axis"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_5",
        "text": ". Now if you've never used NumPy before, then don't worry too much about it. It's just going to use one simple function. Now I believe NumPy should be installed when you install matplotlib, so we should just be able to import it without doing any additional installs. So up here at the top, I'm going to say import numpy, and I'm going to import that as m p. That's a convention there when using numpy is to import it as m p. And now below our x values here, where we have our ages x, I'm going to create a range from these values. So I'm going to say x underscore indexes and I'm going to set this equal to mp.arange. And I'm going to pass in the length of our ages x list here. And what that's going to do is it's going to create a variable called x indexes, and that is an array of values. And those values are gonna be a numbered version of our x values. So basically, it's a lot like having a list with an index starting at 0 and counting up to our last item, but instead it's a NumPy array"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_6",
        "text": ". So once we have that, we're gonna use that for our x values within our bar chart method. So I'm gonna copy that, and instead of using our ages here, I'm instead gonna use those x indexes. So I paste those x indexes into each of our bar methods here. So if I were to run this right now, then it would look very similar to what we had before, but now we're just using those indexes instead. But now that we're using these indexes, we can actually shift the location of these by adding or subtracting to our values here. So if we think about it, they're all stacked up on top of each other right now. So let's shift our first bar to the left and the second bar to the right. But how far do we actually wanna shift these? Well, we wanna shift them by the exact width of a bar. So to do this, it would be nice if we specify an exact width for our bars so that this is explicit. I believe that they have a default width of, like, 0.8 or something like that. But just to be sure, let's create our own width variable"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_7",
        "text": ". So up here underneath x indexes, I'm gonna create a width and set this equal to 0.25. And I think the default of 0.8 is gonna be a little thick with 3 bars, being side by side. So I think 0.25 would be good here. And but you can experiment with these different widths if you'd like, to get different looks depending on your data. So now that we have a width, let's subtract that width from our first plotted values, and we'll add that width to our last plotted values, and that should, shift those bars to all be side by side. So with our first bar plot here, which is right here, we are going to say x indexes minus width. Then for our 2nd bar chart, we're not gonna do anything because that's gonna be in the middle. And then for our last bar chart, we'll say plus width, since we want that to shift over to the right. And lastly, before we plot this, we're actually gonna need to tell our plot that we want the width of the bars to be equal to the width variable that we just created"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_8",
        "text": ". And we can do that just by passing in another variable here. So right before color on all these, I'm going to add a width oops, let me spell that right. Width equal to width. And I did that for all 3 of these bar methods. So width equals width here, here, and there. So now that we've done that, if we run our code here, then now we can see, if I make this a little larger here, we can see that now our bar chart has these all lined up side by side instead of being stacked on top of each other like they were before. Now if you have more or less bars that you need to fit side by side, then you'll have to adjust the offsets accordingly, for the number of bars that you have. The way that I did this was with 3, but if you added another bar, then you'd need to do an offset with the width, added twice and so on. Now also, if we look at our x axis down here, we can see that we no longer have the age ranges that we had before. It's using the indexes, since that's what we needed to do our offset"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_9",
        "text": ". So to fix this, let's go back to our code. So I'm gonna shut that down. And down here towards the bottom, we're gonna need to use an xticks label to change the labels. So right here above the title, I'm gonna say plt.xticks. Oops. Let me spell that right. So within this xticks method, we need to pass in a couple of arguments. So I'm gonna say ticks is equal to, and those ticks are equal to the x indexes. Now the labels for those ticks are going to be equal to our ages list here. So we are using those x indexes for the ticks, and the labels, which are all of our ages that we saw before in the last video, we're gonna use that for our labels. So now if I run that, then we can see that now our plot, has our x axis labeled correctly. Okay. So we've looked here at vertical bar charts and how to add multiple different bars to that plot. And in a minute, we're gonna look at how to create horizontal bar charts, but first, I wanna load in some data that's more appropriate for a horizontal chart"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_10",
        "text": ". You usually want to use horizontal bar charts when you have a lot of data and it looks too crowded in a vertical plot. And the data that I want to load in is going to be from a CSV file. So so far, we've only used data that has been directly in our Python script. But most of the time, you're gonna be, likely using data from external sources like a CSV file. And sometimes you're gonna need to work with that data a little bit before it's actually ready to be graphed. So first, let me get rid of the data that we've been using so that we can make room for data that will load in from our CSV file. So I'm going to remove. I'm gonna remove all the way from our pltxticks there. I'm gonna go all the way to our ages and remove all of that data. And for now, I'm also going to comment out our plot titles and plot show and things like that. And now, let me open the csv file and show you what this looks like. So I have this open here in my current directory"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_11",
        "text": ". And like I said, all of this is gonna be available for download in the description section below, if you want to follow along. So this is the CSV file that I'm gonna be loading in here. So this is also data from that Stack Overflow developer survey, but I cleaned it up a little bit and only grabbed the data for the programming languages, respondents said that they worked with. So we can see that the top line here tells us what information this is. So this first column here is the responder ID. So these are just IDs for each person who answered the survey. And the languages worked with, these are the languages that that specific person said they knew. So this first person here said that they knew HTML, CSS, Java, JavaScript, and Python. And we can see that these languages are all, delineated by a semicolon here. So each line here has all these different languages. And using these, we can, graph the most popular programming languages from that survey. So let me go back to my script here"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_12",
        "text": ". And like I said, let's say that we wanted to create a bar chart of the most popular programming languages that people said that they work with. So first, let's grab the data from that CSV file. Now there are multiple ways that we can load in a CSV file. We could use the CSV module from the standard library. We could use the read CSV method from Pandas. We could also use the load TXT method from NumPy. Now first, let's use the CSV module from the standard library for since, most people are probably familiar with that. But then I'm also going to show you a faster way using Pandas and that read CSV method. So first, let's use the standard library to do this. So at the top here, I'm going to import CSV, and now I'm gonna read that file using the CSV module. Now if you don't know how to work with CSV's files using the CSV module from the standard library, then I do have a detailed video specifically on that. So I'll be sure, to leave a link to that video in the description section below if anyone is interested"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_13",
        "text": ". Okay. So the way that we can read this in is I can say with open, and we want to open that file was called data dot CSV, and it's in the same directory as this script so I don't have to specify a full path. And now we can just say as CSV file, and now we can use this CSV module to read this in. So I'm going to say CSV reader is equal to, and I'm going to use the dictionary reader method from the CSV module to read in the CSV data. The dictionary reader actually makes, a dictionary where we can access the values by key instead of by index, and I find that pretty helpful. So to do that, that is csv.dict reader. And now we just want to pass in that CSV file. Okay. So now we should have that CSV data in our CSV reader variable, and this is an iterator that we can loop over. Now I don't want to loop over all of these right now because I think there are, like, 90,000 rows in that data there. So instead, let me just print out the 1st row so that we can kind of see what this looks like"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_14",
        "text": ". And I can grab that first row by saying row is equal to next CSV reader, and that will grab, that first line from that iterator. And now let's print that out. So I'll print out row. So if I save that and run it let me make my output a little larger here. Okay. So we can see that this is an order dictionary and the keys are what we saw as the headers in the CSV file, and the values are the responses for that particular person. So like I said, we wanna plot the most popular programming languages. So those are within the key languages worked with right here. So let me just print out that key instead of printing out that entire row. So if I save that and run it, then we can see that now we get those languages. And like I said, these are delimited by semicolons here. So to clean this up a bit and turn this into a list of languages, we can actually split the values on that semicolon, by saying after we access that key, we can just simply say dot split and split on those semicolons"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_15",
        "text": ". So if I save that and run it, then now we can see that we have a Python list of those languages. So sometimes you're gonna run into data that you need to clean up or analyze a bit before you're actually able to plot the data that you want. So that's why I'm showing that process here. So in our case, we want to plot the most popular programming languages from the results of this survey. So we need to keep a count of each language, that each respondent said that they work with. So there are a lot of different ways that we could do this as well. We could keep a list and count them at the end. We could keep a dictionary and update the counts of of that dictionary each time. But this is actually so common, called counter. And it's definitely the best way to do something like this. Now if you don't know how counters work, they can be extremely helpful. And I plan on making a video specifically about counters in the near future, but I haven't put one together just yet"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_16",
        "text": ". So first, let me show you how, a quick example of how counters actually work. So let me open up my terminal here, and I'm going to run Python. And let me show you how counters work here really quick. So to import these, I'm going to say from collections import counter. They are from the collections module. And now that we have a counter, I'm going to say c is equal to counter and I'm going to pass in a list here. So I'm gonna pass in a list of Python and I'll also pass in a, of Python and JavaScript, those two values in my list. So if I look at that counter, we can see that this says, okay. I have a counter here. I have a key of Python, and that's currently set to 1. I have a key of JavaScript, and that's currently set to 1. So it's keeping count of how often it sees these values. So to update this counter, I can simply say c dot update. And now I'm gonna pass in a new list. So this new list, let's say this time I say, c plus plus oops, c plus plus and Python. Okay. So now let me look at this counter"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_17",
        "text": ". So now when we look at the counter, we can see, okay, now Python is 2 because it's seen Python twice. We we saw it up here when we first created the counter, and we saw it up saw it right here when we updated the counter. It's still only seen JavaScript one time the first time we created it, and it's only seen c plus plus one time. So now let's do an update one more time. So if I run that update statement again with c plus plus and Python, and then look at our counter again. Now it's saying, okay, I've seen Python 3 times, c plus plus twice, JavaScript once. So this is what we're gonna use to keep track of these languages. So at the top of my script, let me exit out of Python here. I hope that all made sense to you, because these are the kind of things that you need to do sometimes when you clean up data for plotting. Okay. So I'm gonna close down that output. Now up here at the top of my script, I'm gonna import that counter. So, again, that's from collections, import counter. Spell that right. Okay"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_18",
        "text": ". Now I'm gonna instantiate a new counter right after we read in our CSV data. So right above our row here, I'm going to make a variable and I'm going to call this language underscore counter and set that equal to an empty counter. So right now we only have the data for a single row, but we want to grab the exact same list of languages from every row. So in order to do this, we can copy what we've already printed out here, This big long thing here is what got us that list of languages from that single row. So let's copy that, and now we can loop over all of the rows of our CSV data and update our counter with the data, that is within this list here. So I'm going to say 4 row in CSV reader, and this will loop over every row in that CSV file. And I'm going to say language counter dot update. And we want to update that with that list of languages for every single row. And so I'm going to paste that in, and this section here is what's gonna give us those lists of languages"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_19",
        "text": ". So now our language counter should get updated, with all those languages. Okay. So now let's print out our language counter to see if it looks like we have some coherent data. And I'm gonna do this back on the main level of the Python script outside of this with context manager here. So above our plt.title, I'm gonna print out language counter. So let's run that, and it looks like we've got some good data here. Okay. So since this is a counter, it should print out sorted with the, most responses at the beginning. So we can see here that we have JavaScript with 59,000, HTML CSS 55, SQL 47, Python 36,000, Java 35,000, and so on. Now we can see that there are a lot of programming languages here. If I remember core correctly, I think there are 28 total here. So we probably don't wanna plot all of these. So let's say that we just wanted the 15 most common languages. Well, the great thing about using a counter, like we did here, is that it actually has a most common method built in, to do this for us"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_20",
        "text": ". So whenever I'm printing this out, I could say print language counter dot most common and just pass in a 15. And if I run that, then that is the 15 most common responses. And that most common method actually returned a list here. And each item in this list is a tuple, containing so this is one tuple here. It's containing the language and the count. So now let's try to plot this data. So how would we do this? Well, first, we need to split out the languages into their own list and these corresponding counts into their own list. So when we did our previous bar charts, we had our x and y axis. So we'll want all of our languages on one axis and the counts on another, so that's why we need to split those up. So there are also a couple ways that we can do this. Now let me show you a way that takes a little bit more code, but I think is gonna be, where most everyone will be able to read it. So to do this, I'm just gonna overwrite this line here. Actually, I will keep that there for now"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_21",
        "text": ". But above this line, I'm just gonna say languages and set this as an empty list, and then I'll say popularity. That's gonna be, for the numbers. So we want the languages in this list and this corresponding popularity in this list. So now let's loop over all those tuples that we got back from this most common method. So I'll say for item in language counter dot most common. Whoops. And let me sorry. Let me, go to the next line here. And remember, this is going to be looping over a list of tuples. And the first value of that tuple is going to be the language and the second value is going to be the popularity. So I'll just say languages dot append item index of 0 to grab that first item and append that to our languages. And we want to append the second item to our popularity. So now if I print out our languages and our popularity, languages, print popularity, save that and run it, then we can see that now we have one list here that is all of our top 15 most common languages"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_22",
        "text": ". And the second list here is the corresponding popularity of that language according to that survey. So now we can actually use these two lists for our plot. Now there's actually a way of doing this whole section right here. There's actually a way of doing that with a one liner using the zip function and unpacking values and things like that. But I wasn't sure how many people would find that confusing. So I think it's easier to read this way. So I just decided to, do it this way instead. Okay. So now that we have these lists here, let me, exit that output there, and I'm also going to, get rid of those print statements. So now that we have these lists, let's plot these just like we did before. So to do that, we can just say plt.bar because we want to make a bar chart here, and on our x axis we're going to plot the languages, and on the y axis, let's plot the popularity. And let's also uncomment out our titles and labels here, and let's change those to match what we're actually plotting"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_23",
        "text": ". So instead of median salary, I'm going to type in, let's just say most popular languages. Spelled that wrong. That's okay. For the x label here, I can just say our x label is the programming languages. So I'll say programming languages. And for the y label here, I'll say number of, people who use. Okay. So now with that in place, let me save that and run this and let's take a look at our chart. Now we can see right off the bat, when we have this many items, it's hard to see all of these using a vertical bar chart like we did here. When you have a lot of items, then it might be more readable to use a horizontal bar chart instead. And we can do that easily just by changing our bar method to a bar h method. So right here where we're saying dot bar, I'm going to change that and say dot bar h. So now we can leave our arguments exactly as they are because the horizontal chart expects the y axis values first, so we'll just keep our languages there"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_24",
        "text": ". Now we will have to change our axis labels here because those are gonna be different now. So I'm just gonna switch the x and y labels here real quick. So I'm just gonna have programming languages as our y label, number of people who use as our x label. Okay? And now I think that's about it. And actually, now that I think about it, I don't even think that we need this y label telling us that these are programming languages. That's pretty self evident since the names of the programming languages are actually the labels themselves. So I'm just gonna get rid of that. That's one thing with plots is, it's nice to be descriptive, but you can also be overly descriptive. So I'm gonna get rid of that. Actually, just let me comment it at it out instead. Okay. So now let me run this. And now we can see that we have, oops, a vertical bar chart here. Let me open this back up, make this a little larger. Okay. So what I meant to say is we have a horizontal bar chart here"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_25",
        "text": ". So we can see that this is much easier to read with a lot of values, and that those aren't scrunched together like they were in that vertical bar chart. So whenever you're plotting things out, if you've got a lot of values to plot with a bar, then it might be a good idea to use a horizontal, for this type of thing. Now one thing here is that with a horizontal bar chart, maybe you want the most popular language. Right now, it's down here at the bottom. Maybe we want that at the top since we read from the top down. So to do this, we could simply just reverse the list that we're passing into the bar h method, before we actually plot it. So I'm going to close that down. And now up here before that bar h method, I'm simply going to say languages dot reverse and popularity dot reverse. And the reverse method on a list actually reverses those in place, so we don't need to, set languages equal to this or anything like that. It's actually going to modify that list in place"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_26",
        "text": ". So now if I save that and run it, then now we can see that we have the most popular languages up top, and I think that that looks a lot better. Now I did say that I was gonna show you a faster way to load in that data from the CSV using Pandas. So let me show you how to do that, because for the rest of the series, I'm probably gonna use pandas to load in data since it's a bit faster and it's also a bit cleaner. So first of all, if we don't have pandas installed, then we'll need to do that. And it's really easy to install. So first, let me install that. I'll just open up my terminal here and clear this out. And we can just install that using pip by saying pip install pandas. Whoops. Got the wrong spelling there. Pip install pandas. And now once that's installed, we will need to I'm just gonna assume that that installs correctly, and it did. Okay. So back here in our script, up here at the top, we need to import this. So I'm just gonna say import pandas as pd"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_27",
        "text": ". That's another convention when you're using pandas is to import it as pd. Okay, so up here at the top of our file, instead of opening our file and using the dict reader method to read in the data, we can instead replace that with a pandas method. So now instead of doing it like this, we can simply say so I'm going to get rid of this with context manager here. And since we got rid of that context manager, I'll unindent these other lines here. But now where we were opening that file, instead I can simply say data is equal to pd.read_csv and pass in the name of that CSV file. And it was data dot CSV. And now I can specify some columns. So I'm going to say that the ID I'm going to create this IDs variable, and I'm going to say ID is the let me see exactly what that column name was, responder ID. So I'll pass in responder ID there. So that's gonna set this IDs variable equal to, all of the IDs in that responder ID column, and we can do the same thing with the languages"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_28",
        "text": ". So I'll call this variable lang underscore responses is equal to, data, and we want the key to be languages worked with. So I'll grab that. So we still want our language counter, but now here for our loop, instead of saying 4 row in csv reader, this doesn't exist anymore, now we have this list of languages here. So I can just say for response in lang responses, update that counter. So that simple update to our code there, should work exactly the way that we that it worked before. So if I save this and I run it, then whoops. Name row is not defined. Okay. So, yeah, I got an error here that says name row is not defined. I also meant to update this section here because there's no row anymore. So we just want to split the response instead. So response dot split. Because remember, these lang responses here, when we're looping through these, each response is gonna be this entire section here of all of the languages. So we can simply just split that response. Okay. So I'll save that and run it"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_29",
        "text": ". And this should work exactly like it worked before. And we can see that it does. That looks pretty good. Now like I was saying before, this is actually real world data that I grabbed from their actual survey. And I actually have those charts that Stack Overflow put together when they analyzed their survey data. So let me open those up and see if we got similar results. So So I'm gonna put my chart here on the right, and their chart I have open here in the browser. So let me open that up. Okay. So here is their chart plotting out the exact same thing that we just plotted. Now there could be some small differences here based on how I sanitized the data compared to how they sanitized it, but you can see that as far as the order goes, we got the same results. They've also styled their plot a bit further, but with a little customization, we could probably get something very similar"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_30",
        "text": ". So it looks like we just need to change up the colors a bit and add in a little, spacing and also make these lines a little thinner, and it would almost be identical. So that's why learning things like this can be extremely useful, because these companies are constantly looking for people who can analyze their data and present it in ways that can give insights like this. So this is definitely a skill that you're gonna be able to apply to a lot of different situations just like we did here. Okay. So before we end, I'd like to mention the sponsor of this video, and that is brilliant.org. Brilliant is a problem solving website that helps you understand underlying concepts by actively working through guided lessons. They have computer science courses ranging from algorithms and data structures to machine learning and neural networks. They even have a coding environment built into their website so that you can run code directly in the browser"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_31",
        "text": ". And that's a great way to compliment watching my tutorials because you can apply what you've learned in their active problem solving environment, and that helps to solidify that knowledge. Their guided lessons will challenge you, but you also have the ability to get hints or even solutions if you need them. It's really tailored towards understanding that material. So their computer science material is fantastic, and I really like what they're doing. They also have plenty of courses depending on what you're most interested in. So they have courses in different fields of mathematics or astronomy, solar energy, computational biology, and all kinds of other great content. So to support my channel and learn more about Brilliant, you can go to brilliant.orgforward/cms to sign up for free. And, also, the first 200 people that go to that link will get 20% off the annual premium subscription, and you can find that link in the description section below. And, again, that's brilliant.orgforward/cms. Okay"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_32",
        "text": ". So I think that is gonna do it for this video. Hopefully, you feel a bit more comfortable working with matplotlib and how you can pluck out the data that you need and create types of charts that you'd like. In this video, we covered bar charts, but in the next video, we're gonna learn how to create pie charts. And pie charts are great for seeing how our data is proportioned and quickly visualize what different categories make up large and small pieces of your data. So be sure to check that out. But if anyone has any questions about what will be covered in this video, then feel free to ask in the comment section below, and I'll do my best to answer those. And if you enjoy these tutorials and would like to support them, then there are several ways you can do that. The easiest way is to simply like the video and give it a thumbs up. And, also, it's a huge help to share these videos with anyone who you think would find them useful"
    },
    {
        "chunk_id": "cab0a1f43a4eba3c723e9bf39a3e576c2b6cc3ba748c961f17052b2887d4914a_33",
        "text": ". And if you have the means, you can contribute through Patreon, and there's a link to that page in the description section below. Be sure to subscribe for future videos, and thank you all for watching."
    }
]