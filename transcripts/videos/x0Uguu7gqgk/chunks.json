[
    {
        "chunk_id": "chunk_0",
        "text": "Hey there. How's it going everybody? In this video, we're gonna be revisiting line plots like we saw in the very first video, but this time we're gonna add to them by adding in fills. Now fills are great not only for making our plots look nice and professional, but also they can give us some useful insights depending on how we use them. So for example, we can use conditional fields that will show us what areas of our line plot fall above or below a certain threshold. So I think the best way to learn is for us to just jump in and start looking at some examples. Now I would like to mention that we do have a sponsor for this series of videos, and that is brilliant.org. So I really want to thank Brilliant for sponsoring the series, and it would be great if you all could check them out using the link in the description section below and support the sponsors. And I'll talk more about their services in just a bit. So with that said, let's go ahead and get started. Okay. So first, I'm loading in my data using the Pandas read CSV method to load in this CSV. Now if you've been following along with previous videos, then this probably looks a little familiar to you. But just in case you didn't see the other videos leading up to this, showing how this works, let me go over all this code here and show exactly what's going on real quick. So here at the top we are importing pandas, and we are also importing pyplot from matplotlib. Here we are bringing in some data from a CSV file, and I'll look at this in just a second, and show you exactly how that's working. But continuing on, we are also doing plt.plot. So this will do a line plot, and these are our ages and developer salaries here. Again, we'll take a look at this data in just a second. We have another plt.plot. So this will be a second line on our line chart. Now we also have plt.legend to show these labels. We're also giving our plot a title, our x axis a label, our y axis a label. Tight layout just, changes the padding around where it looks a little nicer, and plt.show actually shows our plot. So that's a quick overview there. And all of this code and this data dot CSV file will be available for download in the description section below, and I'll put this up on my GitHub if you'd like to copy and, paste into your editor and follow along with this. So here, we are reading in this data from this CSV file, and we are reading this in from data dot CSV. So let me show you what this data dot CSV file looks like. So the data within this data dot CSV file are the ages, so 18, 19, 20, 21, and then these other columns here, we have all devs, Python, and",
        "video_title": "Matplotlib Tutorial (Part 5): Filling Area on Line Plots",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_1",
        "text": "dot CSV file will be available for download in the description section below, and I'll put this up on my GitHub if you'd like to copy and, paste into your editor and follow along with this. So here, we are reading in this data from this CSV file, and we are reading this in from data dot CSV. So let me show you what this data dot CSV file looks like. So the data within this data dot CSV file are the ages, so 18, 19, 20, 21, and then these other columns here, we have all devs, Python, and JavaScript. So these are the median salaries for that age. So for, age of 18, the median salary for all developers who answered the survey, was this number here. The median salary for all the people who said they knew Python was this number here and so on. So when I go back to my code here, So when we load this in using pandas, when we say ages is equal to data age, all that's doing is grabbing that age column. So our ages variable is gonna be equal to, 18, 19, 20, 21, and so on. Same thing for our dev salaries. We're reading in that alldevs column. Pie salaries, we're reading in that Python column, and jssalaries, we're reading in that JavaScript column. Okay? And down here, we saw these line plots in the very first video of this series, but this is plotting out, the salary or their median salaries for all of our developers here. And then we're adding in a custom color and style here as well, also giving it a label. And we're also pot plotting out the Python median salaries here as well. So if I run this with those plots, then this should be similar to what we saw in the very first video. We don't have JavaScript on there right now. I'm only gonna work with, Python and all developers, so that we can kinda see what's going on here a little bit better. Okay. But we've already seen these line plots here, so we kinda know already what that's all about. So now, let's see how we can add in some fields to our plot. Now we'll start off with a simple a simple one here, to just see what this looks like. So let's say that we wanted to fill the entire area underneath our Python plotted data. So to do this, here above plot dot legend, we can create a fill for our plot simply by saying plt.fill_between. And now we're gonna pass in our x axis. So that was ages just like our other plots here. And now we wanna say what we want to fill between. So I want to fill between the Python salaries here, so I'll pass in py salaries. And now I'm not going to pass in anything else. Now we can pass in an additional parameter here and say that I wanna fill between, you know, pi salaries and dev salaries, for example.",
        "video_title": "Matplotlib Tutorial (Part 5): Filling Area on Line Plots",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_2",
        "text": "do this, here above plot dot legend, we can create a fill for our plot simply by saying plt.fill_between. And now we're gonna pass in our x axis. So that was ages just like our other plots here. And now we wanna say what we want to fill between. So I want to fill between the Python salaries here, so I'll pass in py salaries. And now I'm not going to pass in anything else. Now we can pass in an additional parameter here and say that I wanna fill between, you know, pi salaries and dev salaries, for example. But, the y 2, this is called y 2, this is set to 0 by default. So if we don't put anything in there, then it's just going to fill between our Python salaries all the way down to the bottom. So let me run this just to show you what this looks like. So now we can see that our Python plot here has a fill from our Python line all the way down here to the bottom. But we can see it's also interfering here a bit with our other plotted line, So to make this look a little bit better, let's put an alpha on our fill so that we can see through this a bit better. So back here in the plot, I'm just going to say alpha, and this is how much we can see through it. I'm just gonna say 0.25. So now, if I run that, then we can see that now that looks a little bit better there. Okay. So I feel like just filling in our line plots with an alpha here just makes our plots look a little bit better. But if we use these, with conditional thresholds, then it can also give us some useful information and some feedback as well. So let's see an example of this. So right now, our fill is defaulting to 0, which means it's filling between our y values, our Python plot, and 0 all the way down here at the bottom. But we can change that. So I have the overall median salary for all developers who answered the survey, and I have that commented out here. So instead of using 0, let's say that we wanted to fill between this overall median and our Python salaries. So to do that, we could just pass that in as that third argument, which is the y two value that I was telling you about, and that will, fill that in instead of defaulting to 0. So I'm gonna pass that in as the 3rd value there, and now let's run this plot. So now we can see that instead of plotting at 0, that overall median was 57,000. So now it's showing us exactly where our Python plot crossed that overall median salary. So when our Python plot is below the overall median salary, it fills up to that point. And when our plot is above the overall median salary, it fills down to that",
        "video_title": "Matplotlib Tutorial (Part 5): Filling Area on Line Plots",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_3",
        "text": "y two value that I was telling you about, and that will, fill that in instead of defaulting to 0. So I'm gonna pass that in as the 3rd value there, and now let's run this plot. So now we can see that instead of plotting at 0, that overall median was 57,000. So now it's showing us exactly where our Python plot crossed that overall median salary. So when our Python plot is below the overall median salary, it fills up to that point. And when our plot is above the overall median salary, it fills down to that point. So that actually gives us some nice feedback. And we can even put in, some additional conditionals here so that it only fills when that condition is met. So let's look at an example of that. Let's say that we wanted one fill with the color set to green when we are above this median salary and another when it is below, so we'll say red or something like that. So to do that, we can say I'm gonna go to a new line here. Now we're actually going to add in, another argument here, and this is going to be a where. So I'm going to say where, and we're going to set this equal to this will be where pi salaries are greater than the overall median. Okay? So that meets the conditional. This fill between meets the conditional where the Python salaries plot is over that overall median. And I'm also gonna add in one more argument here, and this is going to be, interpolate. So I'm gonna say interpolate, and I'm gonna set that equal to true. And that will just make sure that certain x intersections don't get clipped and that all of the regions are actually filled correctly. So I'm not gonna add custom colors yet. I just wanna show you what this one conditional does. So if I run this, then we can see that now our conditional here let me get this to where you can see the plot and the condition at the same time. So we can see here with that where clause that we are only doing that fill where our Python plot is above that overall median salary. But where it's below, it's no longer plotting up to that point. So if we wanna fill in the area that's below the overall median with a different color, then we'll need to write another fill between method. So I'm gonna go back to the code here. I'm just gonna copy all of this that we currently have, and paste this in below. And instead of being above the overall median salary, I'm just going to say less than or equal to instead. And I think with this current, color scheme, that this first fill between is blue and this first fill between or in the second fill between here is red. So let's go ahead and run that and see what that looks like. Okay. It's not quite red. It's",
        "video_title": "Matplotlib Tutorial (Part 5): Filling Area on Line Plots",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_4",
        "text": "need to write another fill between method. So I'm gonna go back to the code here. I'm just gonna copy all of this that we currently have, and paste this in below. And instead of being above the overall median salary, I'm just going to say less than or equal to instead. And I think with this current, color scheme, that this first fill between is blue and this first fill between or in the second fill between here is red. So let's go ahead and run that and see what that looks like. Okay. It's not quite red. It's kinda orange, but I think that might just be the alpha. So now we can see that everything below that overall median has one color, and everything above it has another based on our fill between methods. Now if we do wanna customize the colors, then we can do that pretty easily just by passing in a color argument. So let's change, one of our fill betweens here to have a custom color. So I'm gonna change, this bottom one here, and I will just say color is equal to, and we'll just pass in red. So if I save that and run it, then we can see that now that does have more of that reddish color than it, than that orange color. So right now, we have our plots filling in the area between our Python plot and a fixed value, and that fixed value is that overall median. But we can actually fill in the area between 2 different plots as well. So for example, if I wanted to fill in the area between the Python salaries and our developer salaries here by age, then I could just pass that into the fill between method instead. So let me go back here and show you what this looks like. So for, our fill betweens, instead of using this overall median, which is that constant value of 57,000, I'm going to use this dev salaries, which is the other line on our plot, and I'm going to pass that in as our third value here. And I also want to change my queries here. So I'm going to change this query to be over, those dev salaries, and this one to be under those dev salaries. So now if I run this, then we can see that now it's filling in the areas between those two plots. So we don't actually have a lot of red here because it doesn't really dip below, the other one. I don't know if it dips below right here or not if I zoom in. Yes. We have a little bit of red there where it dips below for that one age of 38 years old. But if I were to go in and manually edit, this information here so if I was to go down to, you know, ages, if I was to change this to, like, 45,000 instead, and let's see, 50,000 there and 55,000 there. I don't know what that's gonna",
        "video_title": "Matplotlib Tutorial (Part 5): Filling Area on Line Plots",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_5",
        "text": "actually have a lot of red here because it doesn't really dip below, the other one. I don't know if it dips below right here or not if I zoom in. Yes. We have a little bit of red there where it dips below for that one age of 38 years old. But if I were to go in and manually edit, this information here so if I was to go down to, you know, ages, if I was to change this to, like, 45,000 instead, and let's see, 50,000 there and 55,000 there. I don't know what that's gonna make our plot look like, but now let's run it. Okay. And when I changed it manually there, we can see that now I made it dip below that line, and we can clearly see where we're in the blue, and then when it dips below our, all developers line there, we're dipping into the red. So it really helps when you're trying to emphasize those sections in your line plot. Now anyone viewing our plot still wouldn't really know what those red and blue sections represent, so it would probably be a good idea to label these filled sections. So to do that, we can simply pass in a label to our fill between method. So, back here in fill between, I'm just going to do this as the last item here. I'm going to say label is equal to, and for the top one here, I'm just going to say above AVG for above average. And for the bottom here, I will say below average. So now if I run that, then we can see that now those fields are included up here in our legend, and it tells us that the that the blue filled in area is above average and the red is below average. So not only do I think that these fill betweens make our plot, look better, like I just said earlier, but also it really helps us kinda add in a, 3rd level of information here and give us some more feedback, than what is here just on the plot. Okay. So we're just about finished up here. But before we end, I'd like to mention the sponsor of this video, and that is brilliant.org. So in this series, we've been learning about matplotlib and how to plot data in Python, and Brilliant would be an excellent way to supplement what you'd learn here with their hands on courses. They have some excellent courses covering the fundamentals of statistics, and these lessons do a deep dive on how to think about and analyze data correctly. They even use Python in their statistics courses and will quiz you on how to correctly analyze the data within the language. Their guided lessons will challenge you, but you also have the ability to get hints or even solutions if you need them. It's really tailored towards understanding the material. They've also recently released a programming with Python course, and they even have a coding environment built into",
        "video_title": "Matplotlib Tutorial (Part 5): Filling Area on Line Plots",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_6",
        "text": "with their hands on courses. They have some excellent courses covering the fundamentals of statistics, and these lessons do a deep dive on how to think about and analyze data correctly. They even use Python in their statistics courses and will quiz you on how to correctly analyze the data within the language. Their guided lessons will challenge you, but you also have the ability to get hints or even solutions if you need them. It's really tailored towards understanding the material. They've also recently released a programming with Python course, and they even have a coding environment built into their web site so that you can run code directly in the browser. And that is a great way to compliment watching my tutorials because you can apply what you've learned in their active problem solving environment, and that helps to solidify that knowledge. So to support my channel and learn more about Brilliant, you can go to brilliant.orgforward/cms to sign up for free. And, also, the first 200 people that go to that link will get 20% off the annual premium subscription, and you can find that link in the description section below. Again, that's brilliant.orgforward/cms. Okay. So I think that is gonna do it for this video. Hopefully, you feel like you got a good overview of how you can use these fields to enhance your line plots and emphasize certain areas. In the next video, we're going to be covering histograms. And histograms are great for visualizing how our data is broken up into different ranges, and values and how many of those values fall into certain bins. So definitely be sure to check that out. But if anyone has any questions about what we covered in this video, then feel free to ask in the comments section below, and I'll do my best to answer those. And if you enjoy these tutorials and would like to support them, then there are several ways you can do that. The easiest way is to simply like the video and give it a thumbs up, and also it's a huge help to share these videos with anyone who you think would find them useful. And if you have the means, you can contribute through Patreon, and there's a link to that page in the description section below. Be sure to subscribe for future videos, and thank you all for watching.",
        "video_title": "Matplotlib Tutorial (Part 5): Filling Area on Line Plots",
        "video_id": "Unknown ID"
    }
]