[
    {
        "chunk_id": "chunk_0",
        "text": "Hey there. How's it going everybody? In this video, we're gonna go over the basics of filtering data from DataFrames and Series objects. So for example, if we wanted to look at our survey data and only look at people who know Python, then we can filter that data out. Or maybe we only want to see results from a country, or people that have a specific salary range, anything like that. We can do all of that by filtering out data from our Series and DataFrame objects, and we'll learn how to do that in this video. So filtering is one of the main things to learn with Pandas because it's basically how we begin every project, by filtering the data that we want from the data that we don't. Now, I'd also like to mention that we do have a sponsor for this video, and that is brilliant.org. So I'd really like to thank Brilliant for sponsoring this series, and it would be great if you all could check them out using the link in the description section below and support the sponsors. And I'll talk more about their services in just a bit. So with that said, let's go ahead and get started. Okay. So first of all, let me show you something that's going to be the basis for our filters. If we perform some basic comparisons using our data frames, then we'll get back some interesting results. So let's see what this looks like. So right now, I have my Snippets notebook open that we've seen a couple of times throughout the series. And at the bottom here, I'm going to make a basic comparison and see what the result looks like. So let's say that I wanted everyone that has the last name of Doe from our data frame. There should be 2 since we have a Jane Doe and a John Doe here in our data frame. So in our bottom cell here, I'm going to put a comparison that says d f, and then we want to access that last name column. And now we can just say if that last name equals equals Doe. So if I run this, then what we get back is a series object. And this might not be what you expected. So maybe you thought, we would just get a data frame back with all of the values that met our, criteria. But what we got back is a series with a bunch of true false values. Now these true false values actually correspond to our original DataFrame. And the true values are the rows that met our filter criteria, and the false values are the rows that didn't meet our filter criteria. So you can basically think of this like a mask. So So we can see here up here in our simple data frame, the last name of Shaffer is false, and these two last names here with Doe are true. So this is a filter mask when, and when you apply it to a Data",
        "video_title": "Python Pandas Tutorial (Part 4): Filtering - Using Conditionals to Filter Rows and Columns",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_1",
        "text": "a series with a bunch of true false values. Now these true false values actually correspond to our original DataFrame. And the true values are the rows that met our filter criteria, and the false values are the rows that didn't meet our filter criteria. So you can basically think of this like a mask. So So we can see here up here in our simple data frame, the last name of Shaffer is false, and these two last names here with Doe are true. So this is a filter mask when, and when you apply it to a Data Frame, it will give you all of the rows that meet that filter criteria. So now let's apply this filter to our data frame. So first, I'm going to assign this, this return series here to a variable, and I'm just going to call this variable filth. So I'll say filth is equal to, and then this comparison here. Now filter is a built in Python keyword, so be sure to use something else. Anytime, I assign these to variables, I usually, just use, this field, keyword here. Or not keyword, but variable name. Now I also usually like to wrap my entire filter in parentheses because I find it easier to read. So this isn't gonna change anything, but I'm just gonna put this entire thing here within parentheses, so that I can see that this, assignment here is separate from this equal sign. Okay. So now we have this filter here. And remember that this, this filled variable here is equal to this series here of true and false values. And now let's apply this filter to our data frame. And we can do this in a couple of ways. So you might see some people do it like this. We can just pass that directly in, like we are searching for a column. We can pass in a filter there. And if I run this oops. And I got an error there because I did not run this cell to set that variable. So I'll rerun that. And now if I run this, then now we can see that we get a data frame back where it returned all of the rows that have the last name of Doe. Now, we only assigned the filter on a different line because I think that's easy to read, but you might see some people, put these comparisons directly in the brackets for the data frame. So you might see something like this. So I'm just going to, comment that out right now and just grab this entire filter here. You might see some people do it like this and just paste it or put it directly in there. And we can see that that works too. Now, I think that that's a little more difficult to read than just assigning this to a variable. So I'm just going to, use that as a variable. But, you should know that it is a possibility, since you will see some people, put the",
        "video_title": "Python Pandas Tutorial (Part 4): Filtering - Using Conditionals to Filter Rows and Columns",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_2",
        "text": "for the data frame. So you might see something like this. So I'm just going to, comment that out right now and just grab this entire filter here. You might see some people do it like this and just paste it or put it directly in there. And we can see that that works too. Now, I think that that's a little more difficult to read than just assigning this to a variable. So I'm just going to, use that as a variable. But, you should know that it is a possibility, since you will see some people, put the filter directly in there. Okay. So that's one way of narrowing down those rows. Now another way that you can do this, and the way that I prefer to do it, is to use the dot loc indexer that we've seen a few times now. Now. And I'll talk a bit, about why I prefer this in a second, but if we pass in that series of booleans into dotloc, then it should give us the same results that we currently have. So if I say df dotloc and pass in that same filter, then we can see that we get the exact same thing. This here gave us the same results as our dotloc down here. So this is one reason why Pandas can be a bit confusing to people because there are multiple things that you can pass into these different brackets, to get different results. So like I said before, .loc is used to look up rows and columns by label, but if you pass in a series of booleans, like we did here, then you can also filter data out. Now the reason that I like using .loc for this is because we can still grab the specific columns that we want as well. So for example, if I wanted the email column, then I could simply say, pass in a second value here into dot loc and just say that we want that email column. If I run that, then we can see that we get the emails, that match those last names. So remember, the first value to dotloc are the rows that we want, and the second value here, are the columns that we want. So since I wanted the email column, it gives me a series of those emails where the last name is equal to Doe. Okay. So real quick, let's go over some other ways to filter data out here. So first, let's go over the and and or operators. Now we can't use the Python built in and and or keywords for our filters, so we're going to be using some other symbols. And the symbolmultiplymiddles that we're going to use here are the ampersand for and, let me write these out here, the ampersand for an and, and this vertical bar for an or. So these symbols carry over from other programming conventions, so you may have seen them before. So, for example, let's say that we wanted our filter",
        "video_title": "Python Pandas Tutorial (Part 4): Filtering - Using Conditionals to Filter Rows and Columns",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_3",
        "text": "some other ways to filter data out here. So first, let's go over the and and or operators. Now we can't use the Python built in and and or keywords for our filters, so we're going to be using some other symbols. And the symbolmultiplymiddles that we're going to use here are the ampersand for and, let me write these out here, the ampersand for an and, and this vertical bar for an or. So these symbols carry over from other programming conventions, so you may have seen them before. So, for example, let's say that we wanted our filter to get all of the rows where the last name is Doe and the first name is John, which should only return this one result. So in order to do this, we can go back up to our filter here, and I'm just going to get rid of, this cell here, because I'm just going to be using dot loc from now on. So now with our filter here, let's say that we want a last name equal to doe, and, which we're going to use the ampersand, and we want the first name equal to John. So I will put that in here. And I also, let me actually separate these out as well. I like to each one wrapped in parentheses. I think it makes it a bit easier to read. So now if I rerun that filter and then rerun our dot loc, then we can see that now we're just getting, that single email address. And that email again is where all of the last names were equal to Doe and the first names were equal to John. So in this case, it's just one result. So now let's look at an example using the OR operator. Now for this we can use the vertical bar character. So let's say that I wanted a filter where the last name is equal to Shaffer or the first name is equal to John. Okay? So if I wanted the last name to be equal to Shaffer, or the first name is equal to John, for the or, we're gonna do a vertical bar character there. So now if I rerun this, then we can see that we get back all of the rows or all of the email addresses, where the last name is equal to Shaffer OR the first name is equal to John. So in this case, it was these two rows here. Now we can also get the opposite of a filter. So let's say that I wanted to get the complete opposite of this filter, where we want all of the rows where the last name isn't Shaffer and the first name isn't John. Now I could go in here and fiddle around with this query that I currently have, trying to get everything right, or I could simply add in a tilde at the beginning of this filter and it will give me everything that didn't match that filter. So if I just come in",
        "video_title": "Python Pandas Tutorial (Part 4): Filtering - Using Conditionals to Filter Rows and Columns",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_4",
        "text": "was these two rows here. Now we can also get the opposite of a filter. So let's say that I wanted to get the complete opposite of this filter, where we want all of the rows where the last name isn't Shaffer and the first name isn't John. Now I could go in here and fiddle around with this query that I currently have, trying to get everything right, or I could simply add in a tilde at the beginning of this filter and it will give me everything that didn't match that filter. So if I just come in here and put a tilde there, then that is going to, negate that filter and give me the opposite of those results. So we you we can see here that we get Jane Doe, because that are that is all the results where the last name was not Shaffer or the first name wasn't John. So this goes back to truth tables that some of us may have studied in school. Now if anyone is unfamiliar with truth tables, then let me know and maybe I can make a future video on that subject. But it's more mathematical related than programming related, although the 2 do overlap very frequently. Okay. So that kinda covers the basics of filtering on a small data frame, But now let's go back to our larger dataset of survey data and look at some real world examples of some filters that we might want to take a look at. So I'm gonna bring up my other notebook here, and here we have the Stack Overflow, survey data that we've been using throughout the series. And again, if you would like to follow along, then you can find a link to this code and the data in the description section below. Okay. So now that we've learned about some basic filtering, let's see if we can run some filters on our survey data here. So for example, let's say that we wanted to look at the data for people who are making a salary over a certain amount. Now maybe we wanna wanna take a look at what languages are earning the higher salaries or something like that. So in order to do that, I'm going to first create a filter. Now if you don't know which column in the DataFrame gives the salary, then you can always find that using the schema DataFrame that we've seen throughout the series that tells us what what, each of these columns here, means. But for the sake of time here, I'll just tell you that the column for salary, if I go over here, I think I can find it here pretty quick. It is this converted comp, right here. So if we scroll down through some of these survey results, we can see that this person says that they make, about 9,000. This person makes 61,000, and these are converted to, USD. And real quick, let me reload this page here, just to make sure that I have, run",
        "video_title": "Python Pandas Tutorial (Part 4): Filtering - Using Conditionals to Filter Rows and Columns",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_5",
        "text": "the series that tells us what what, each of these columns here, means. But for the sake of time here, I'll just tell you that the column for salary, if I go over here, I think I can find it here pretty quick. It is this converted comp, right here. So if we scroll down through some of these survey results, we can see that this person says that they make, about 9,000. This person makes 61,000, and these are converted to, USD. And real quick, let me reload this page here, just to make sure that I have, run all of these cells and that I'm, that all of these variables here, have been, initialized. Okay. So if we wanted to get a filter, with all of the high salaries, then let me come over here and, again, I will copy this column name here. And now let's make a filter. And I'll call this filter, High Salary. And I'll set this equal to, a conditional here where we're saying that we want the df of, this converted comp column of our data frame. We want that to be over, let's say a high salary is over 70,000. You know, this is, kind of, subjective, but we'll do that as a filter here. Now let's apply that filter to our data frame. So just like we saw before, I can say df.loc and I can pass in that high salary filter there. And now we can see that, we'd get some results here, and this isn't all of our respondents. We can see that now it's respondent 6 and 9 and 13. So if I scroll over to our, to our converted comp, then all of these salaries here should be over 70,000, and it looks like they are. Now in order to narrow these columns down a bit, let's just grab a certain number of columns. So I'll grab the country, the programming languages, and the salary. So to do this, remember we can just pass these into dot loc. So up here, where we are doing dot loc, I'll put in a comma here. And now I'll put in a list for the columns that we want. And let's say that we wanna get the country. We also wanna get the programming languages that they that the, these people have worked with. And this, here and like I said, you can look all of these up in, the schema, but this is under languages worked with. We can see that this person knows Java, R, SQL, and so on. So I'll paste that in as one of the columns that we want, And, also, I will get the converted comp. So I will paste that in as well. And now let's run that. Now we can see that we get, not only the people who, meet this high salary standard, filter that we set, but also we're getting the we're only getting the country, the languages that they know, and their salary. So our filter does seem like it",
        "video_title": "Python Pandas Tutorial (Part 4): Filtering - Using Conditionals to Filter Rows and Columns",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_6",
        "text": "but this is under languages worked with. We can see that this person knows Java, R, SQL, and so on. So I'll paste that in as one of the columns that we want, And, also, I will get the converted comp. So I will paste that in as well. And now let's run that. Now we can see that we get, not only the people who, meet this high salary standard, filter that we set, but also we're getting the we're only getting the country, the languages that they know, and their salary. So our filter does seem like it is being applied correctly, and that this is working nice. So now that I'm actually seeing, the countries here, that reminds me that we might wanna do some filtering with multiple values. So for example, you know, my YouTube audience comes mainly from the United States, India, the United Kingdom, Germany, and Canada. Well, that's where the largest, percentages of the audience of people who are watching the videos come from. So let's say that I wanted to filter out the survey results here so that I only see the results from those 5 countries that I mentioned. Now I could create a super long filter up here, where I say, you know, if the country is equal to the United States, or if the country is equal to India, or if the country is equal to the United Kingdom, but that would take up a lot of space. Instead, let's just create a list of those countries, and then I'll show you a neat trick that we can do, to filter those out. So now up here instead of using this high salary, filter here, I'm just going to call make a list of countries here. And I'll set this equal to I'm kind of a slow typer here, so let me type these out really quick. Okay. So now if we want all of the survey results, where, the respondents said that they were from one of these 5 countries, then I can simply say I'll set a new filter here. Actually, let me do that up here. I'll set a new filter and I'll set this equal to, d f of country, so, where the country dot is in, and we want the country to be in this list of countries here. So I'm going to run that cell, and now let's apply that filter to our data frame. So if I run this, and just to narrow down these results to make sure, to where we can see the country United Kingdom, United States, Canada, India. So it looks like that applied, correctly as well. Now let me show you one more common filter operation that you'll probably use a lot. So we can actually use string methods within Pandas as well to do some alterations to our data frame, or in this case, to help with a conditional. So let me show you what I mean. So let's say that we only want to look at people",
        "video_title": "Python Pandas Tutorial (Part 4): Filtering - Using Conditionals to Filter Rows and Columns",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_7",
        "text": "So if I run this, and just to narrow down these results to make sure, to where we can see the country United Kingdom, United States, Canada, India. So it looks like that applied, correctly as well. Now let me show you one more common filter operation that you'll probably use a lot. So we can actually use string methods within Pandas as well to do some alterations to our data frame, or in this case, to help with a conditional. So let me show you what I mean. So let's say that we only want to look at people who answered that they knew Python as a programming language. So let's see how we do this. So first of all, the column that lists the programming languages that each person said that they know is that language worked with column. So let's see what this looks like. So in this here, I'm just going to grab that language worked with column. Oops. And I spelled, language wrong. So language worked with. Is that right? Yep. Okay. So we can see that we get, some programming languages here, and each different language is separated by a semicolon. So we can't just do a query where we say, you know, if the language worked with equals Python, because the actual value of that column will be any combination of the languages listed on the survey. So one way that we could do this is to instead use a string method and see if Python is within, this string of these languages that they know. So to do this, I'm going to, rewrite my filter here. And I'm just gonna say that my filter is going to be equal to and we want to grab the languages worked with for each person and then we're going to use some string methods. So I'm going to say dot str dot contains, and then I will pass in Python. Now also we can see that we have some, NaN values here, but not a number. Now we need to also set a fill value for those or else we're gonna probably get an error. So, that is part of the contains method here. I can just say n a is equal to false. We're just, not gonna do anything with those. So let me explain this one more time here. So this filter that we're putting in place here, it's saying, okay, for this column here, the languages worked with, which are all of these results here, we are saying the string in that column, does it contain Python? So that's my filter. I'm going to run that cell. And now let's apply that filter to our data frame by saying dot loc and I will pass in that filter. And now let's also just grab the languages worked with column to make sure that that worked correctly. So if I run that, then all of these results here or all of these rows that it gave us back should have Python in their languages known.",
        "video_title": "Python Pandas Tutorial (Part 4): Filtering - Using Conditionals to Filter Rows and Columns",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_8",
        "text": "the languages worked with, which are all of these results here, we are saying the string in that column, does it contain Python? So that's my filter. I'm going to run that cell. And now let's apply that filter to our data frame by saying dot loc and I will pass in that filter. And now let's also just grab the languages worked with column to make sure that that worked correctly. So if I run that, then all of these results here or all of these rows that it gave us back should have Python in their languages known. So we can see that we have Python there, there, there. So, yes, it does seem to be in all of these results. Now this one here, number 8, we can't actually see it here, but we have these ellipses here, so it's probably, just being truncated here. Now in my last video, I kept saying that these were being concatenated. I meant truncated. A few people pointed that out in the comments. So, yeah, these are being truncated here, so we just can't see the Python value there, but they are there. And I'll probably do a complete video on, string methods here in the future, since there's so much more that we can do with these. We can use them to replace text, to split values, and all kinds of different stuff. So it's, very these string methods are extremely useful in Pandas. So that's a basic overview of doing some filters with our data frames. Again, the key takeaways are that we can do these conditionals here, and and have them as a filter. And again, let me print out just the filter without applying it to the data frame. We can see that the filters return a series of true false values. And when we apply that to our data frame, those true false values where we get all of the true values back and not the false. So if I look down here, we have, respondent 1, 2, 4, and 5 as true, and 3 was false. So if I look at my data frame here, we can see that we get 1, 2, 4, and 5, and 3 is not there because that value was false. So that's how filters work, and again, it's an essential, part of Pandas because this is what the one of the first things that we do with our data whenever we are loading it into Pandas. Okay. So before we end here, I would like to mention that we do have a sponsor for this video, and that is brilliant dot org. Brilliant is a problem solving website that helps you understand underlying concepts by actively working through guided lessons. And Brilliant would be an excellent way to supplement what you learn here with their hands on courses. They have some excellent courses and lessons on data science that do a deep dive on how to think about and analyze data correctly. So if you're watching my Panda series because",
        "video_title": "Python Pandas Tutorial (Part 4): Filtering - Using Conditionals to Filter Rows and Columns",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_9",
        "text": "we are loading it into Pandas. Okay. So before we end here, I would like to mention that we do have a sponsor for this video, and that is brilliant dot org. Brilliant is a problem solving website that helps you understand underlying concepts by actively working through guided lessons. And Brilliant would be an excellent way to supplement what you learn here with their hands on courses. They have some excellent courses and lessons on data science that do a deep dive on how to think about and analyze data correctly. So if you're watching my Panda series because you're getting into the Data Science field, then I would highly recommend also checking out Brilliant and seeing what other Data Science skills you can learn. They even use Python in their statistics course and will quiz you on how to correctly analyze the data within the language. Their guided lessons will challenge you, but you'll also have the ability to get hints or even solutions if you need them. It's really tailored towards understanding the material. So to support my channel and learn more about Brilliant, you can go to brilliant.orgforward/cms to sign up for free. And also, the first 200 people to go to that link will get 20% off the annual premium subscription, and you can find that link in the description section below. Again, that's brilliant.orgforward/cms. Okay. So I think that's gonna do it for this Pandas video. I hope you feel like you got a good idea for how to filter the data within our data frames to find the information that you're looking for. Like I said, this is a fundamental skill in Pandas, which is usually one of the first things that we do with our data. In the next video, we'll be learning how to alter the data in our data frames and make changes. So we'll learn how to make changes to specific values and also how to make multiple changes at once across the entire data frame. So for example, maybe you want to make it so that email addresses are all cast to lower case so that they are easier to search. Or maybe you want to take out any spaces of your column names and replace them with underscores. So all of that will be covered in the next video, so be sure to stick around for that. But if anyone has any questions about what we covered in this video, then feel free to ask in the comment section below, and I'll do my best to answer those. And if you enjoy these tutorials and would like to support them, then there are several ways you can do that. The easiest way is to simply like the video and give it a thumbs up, and also it's a huge help to share these videos with anyone who you think would find them useful. And if you have the means, you can contribute through Patreon, and there's a link to that page in the description section below. Be sure to",
        "video_title": "Python Pandas Tutorial (Part 4): Filtering - Using Conditionals to Filter Rows and Columns",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_10",
        "text": "video, then feel free to ask in the comment section below, and I'll do my best to answer those. And if you enjoy these tutorials and would like to support them, then there are several ways you can do that. The easiest way is to simply like the video and give it a thumbs up, and also it's a huge help to share these videos with anyone who you think would find them useful. And if you have the means, you can contribute through Patreon, and there's a link to that page in the description section below. Be sure to subscribe for future videos, and thank you all for watching.",
        "video_title": "Python Pandas Tutorial (Part 4): Filtering - Using Conditionals to Filter Rows and Columns",
        "video_id": "Unknown ID"
    }
]