[
    {
        "chunk_id": "chunk_0",
        "text": "Hey there. How's it going everybody? In this video, we're gonna be learning how to create pie charts. And pie charts are pretty simple to use. They're similar to bar charts that we looked at in the last video. But instead of plotting certain values for each category, it's instead going to show us the proportion that each category contributes to a whole. So, basically, just like the name implies, you can think of our chart as a pie, and each category will be a slice of that pie. And the larger the slice means that category has, more of whatever values we're measuring. So let's go ahead and jump into this and see some examples. But real quick, I'd also like to mention that we do have a sponsor for this series of videos, and that is brilliant.org. So I'd really like to thank Brilliant for sponsoring this series, and it would be great if you all can check them out using the link in the description section below and support the sponsors. And I'll talk more about their services in just a bit. So with that said, let's go ahead and get started. So first, I'm gonna go over a very basic example to see how this works, and then we'll look at some more real world data where we plot popular programming languages using a pie chart. So I have a little bit of starting code here that you might recognize if you're continuing from the previous videos. But if you're not, then let me quickly go over the starting code that we have here. So I'm simply importing pie plot from matplotlib. We are setting the style to be 538 just so that this looks a little nicer. And currently, all we have is a title, of my awesome pie chart, and we are making the tight layout, which will get some default padding in there that looks nice. And then we are doing plot dot show, which will actually show our plot for us. And I've also got some colors commented out down here, but we don't have to worry about that right now. Now this code will be available for download. I have a link in the description section below that takes you to my GitHub. So if you wanna follow along, then you can download this code and follow along. Okay. So like I said, pie charts are pretty simple and straightforward. So first of all, we need the values that we want to represent in our pie chart. And, again, we can think of these as slices of the pie. So for example, let's start off easy, and say I wanted to just represent two numbers in a pie chart. So I'm gonna say slices is equal to, and this will be a list. So I'll do a list of 6040. And that's actually all we need to create a very basic pie chart. So to plot that, I can just say plt.pie, not plot, sorry. Plt.pie, and we want to make a pie",
        "video_title": "Matplotlib Tutorial (Part 3): Pie Charts",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_1",
        "text": "all, we need the values that we want to represent in our pie chart. And, again, we can think of these as slices of the pie. So for example, let's start off easy, and say I wanted to just represent two numbers in a pie chart. So I'm gonna say slices is equal to, and this will be a list. So I'll do a list of 6040. And that's actually all we need to create a very basic pie chart. So to plot that, I can just say plt.pie, not plot, sorry. Plt.pie, and we want to make a pie chart of those slices. So if I run that, then we can see that it plots out our values of 6040. And the 60 value takes up 60% of our plot, and the 40 value takes up 40% of the plot. But this isn't very useful right now since we don't have any labels or any indication of what we're plotting. So let's add some of that. So I'm gonna go back to the code here. Okay. So we have our slices, but let's also add labels for our slices so so that we know what's what when we look at our chart. So to do this, we can just add labels as a list, and these will correspond to the slices that we want them to be a label for. So underneath the slices here, if I was to say labels is equal to, and I'll just pass in a list here. So the first one, I want to label as 60. The second one, I want to label as 40. And then we can add those labels to our pie chart simply by saying, labels is equal to that labels variable that we just created. And also, just a quick side note, our values actually don't need to add up to a 100%. They can be anything, and the pie chart will calculate their proportions accordingly. So if I were to double these values, then we'd still get a chart that looks the same. So if I was to double this to 120 and double this to 80, then those are still gonna take up the same proportions of the pie chart. So if I run that, then we can see that our 120 here takes up 60%, and that's labeled 60, and our 80 here still takes up 40%, and that's labeled 40. Now I don't know about you, but I like to have some separators on the edges here of these colors, instead of these colors just bumping up against each other. So to do this, we can pass in some wedge properties. So back in our code, after labels, this is going to be in the py method. We can say wedge props for wedge properties, and this is gonna be a dictionary of values. And we just wanna change the edge color. So I'm gonna type in edge color, and let's just set that to black. So if I run that, then now we can see",
        "video_title": "Matplotlib Tutorial (Part 3): Pie Charts",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_2",
        "text": "but I like to have some separators on the edges here of these colors, instead of these colors just bumping up against each other. So to do this, we can pass in some wedge properties. So back in our code, after labels, this is going to be in the py method. We can say wedge props for wedge properties, and this is gonna be a dictionary of values. And we just wanna change the edge color. So I'm gonna type in edge color, and let's just set that to black. So if I run that, then now we can see that we have a black edge, when before these were just a solid color here. Now if you're wondering how I knew to change the, edge color property there for that wedge property, that's something that I looked up in the documentation. And if you Google matplotlib wedge, then it'll take you to their documentation page with all of the customizations that you can make. Okay. So lastly, let's look at how we can specify our own colors for these slices. And after we do that, then we'll take a look at a more real world example where we create a plot for popular programming languages. So to change the colors of these slices, we can do the same thing that we did with the labels and just create a new list corresponding, with the colors that we want for each slice. So I'll just add a few extra colors here and also let me add a few extra slices. So I'm going to pass in, 30 and 20 here and then I will also pass in labels for these, so just extra 1 and extra 2. Now these aren't gonna take up 6040 anymore, but that's okay. We're just doing a demonstration here. And now we wanna pass in a list of corresponding colors. So I'll pass in, let's see, blue, red, yellow, and green as the last color there. And now we can pass those colors into our chart by passing those into the pie method here. So right after the labels, I'll pass in colors is equal to, and we call that list colors. So I'll save that. And now if we run that, then we can see that we have more slices here, all of these are labeled, and we have some custom colors. Now I almost never use just the color names like we did here, because I think that looks kinda like something you'd see in an elementary school textbook or something like that. I just think it's, kind of bright. So you also have options of using hex color values to select your colors as well, and I almost always use hex values to get the exact color that I want, or I'll let Matplotlib's styles choose default colors for me. But that's why I have these colors commented out down here in my code, because I'd like to use those for this example instead. So instead, if I were to copy all of these",
        "video_title": "Matplotlib Tutorial (Part 3): Pie Charts",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_3",
        "text": "I think that looks kinda like something you'd see in an elementary school textbook or something like that. I just think it's, kind of bright. So you also have options of using hex color values to select your colors as well, and I almost always use hex values to get the exact color that I want, or I'll let Matplotlib's styles choose default colors for me. But that's why I have these colors commented out down here in my code, because I'd like to use those for this example instead. So instead, if I were to copy all of these here let me grab all of these, and I'm just gonna paste these in as my colors. So now we have that blue color. This is a blue hex color. This is a hex red color, a hex yellow, and a hex green. And I just found these on a color palette online that I thought looked good. So if I run this, then we can see that now those colors are a bit more muted, and I think that looks a lot more professional than using those built in named colors. Okay. So now that we've gone over the basics of pie charts, now let's look at a real world example and plot popular programming languages. Now I have the have these available here in a snippets file that I have open. Here, let me delete those color comments right now so that we can see everything. So in my snippets here, and I'm gonna have this available, in the description section below as well if you wanna go along with these snippets. But I'm gonna copy and paste all of these, and then I'll explain what this data is. And I'm just gonna paste this over top of our custom colors here and also our slices and labels. So if I save that, now that we don't have those custom colors, I'm also gonna have to remove colors from the, pie method here since we're no longer using that. And now let me explain this data here. So I grab this data 2019 Stack Overflow developer survey, and these slices here represent how many respondents said that they use a particular language, and the labels here are the language that they said that they knew. So the first value of 59,000 here is how many people said they knew JavaScript, and 55,000 is how many people said they knew HTML and CSS and so on. Now we've got a lot of languages here. These are the top 15. There were around 30 languages here before, before we narrowed this down a bit. So this is one mistake that I see sometimes when people are creating pie charts. Pie charts don't really look good when you have this much data. They're really best for comparing, you know, 5 things or something like that. So let's see what this looks like if we run this with all 15 of these values. So we can see here that this just gets extremely crowded,",
        "video_title": "Matplotlib Tutorial (Part 3): Pie Charts",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_4",
        "text": "and CSS and so on. Now we've got a lot of languages here. These are the top 15. There were around 30 languages here before, before we narrowed this down a bit. So this is one mistake that I see sometimes when people are creating pie charts. Pie charts don't really look good when you have this much data. They're really best for comparing, you know, 5 things or something like that. So let's see what this looks like if we run this with all 15 of these values. So we can see here that this just gets extremely crowded, and it might take us some time to find out exactly what we are looking for. And it's also hard to get a good comparison from language to language. Like, if we were to try to compare SQL to JavaScript here, then it looks like JavaScript has a larger chunk here, but it's really hard to tell by how much because there's so much data. So if you wanted to plot this many items, then I would definitely recommend using a bar chart like we used in the last video instead of a pie chart. I wouldn't use a pie chart unless you have, you know I wouldn't use a pie chart if you have more than 5 items. But if you have less than 5 items, then I think a part, pie chart would work fine. So with that said, let's strip down our data to only include the top 5 programming languages. So I'm gonna go back to our code here, and now I'm just going to delete all of these up until the 5th item. So 1, 2, 3, 4, 5. So Java is the 5th. And then I will delete all the way up until the 5th item here. So 1, 2, 3, 4, 5. Okay? Okay. So now if we run this, then we can see that that looks a lot better than all of that clutter that we had before. Okay. So now let's see a few more things that we can do with this pie chart. So a lot of the times, you'll see some pie charts that have an emphasis on one piece of the chart. So for example, let's say that I, that we were preparing a talk for a Python conference, and we wanted to emphasize, the Python slice on this chart. So to do this, we can pass in an explode argument, and this will be a list of values that will offset the slice. So to do this, I'm going to create a an explode list here underneath our labels. We'll set that to an empty list. Okay. And these values will represent, will be a list of floats which represent how much we want to emphasize that slice. So a 0 will keep that slice how it is, and any number besides 0, will represent the fraction of the radius that we'd like to explode the value. Now that might not make sense right now, but let's go ahead",
        "video_title": "Matplotlib Tutorial (Part 3): Pie Charts",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_5",
        "text": "argument, and this will be a list of values that will offset the slice. So to do this, I'm going to create a an explode list here underneath our labels. We'll set that to an empty list. Okay. And these values will represent, will be a list of floats which represent how much we want to emphasize that slice. So a 0 will keep that slice how it is, and any number besides 0, will represent the fraction of the radius that we'd like to explode the value. Now that might not make sense right now, but let's go ahead and take a look at an example here, and I think it'll make more sense. So if we want to explode Python, that is the 4th item of this list. So I'm just gonna say 0, and now on Python, I'll just say 0.1, and then we'll put 0 for Java as well. And now we can add explode here to our arguments. So I'm gonna say explode is equal to that explode list. Okay. So now if I run this, then we can see here that Python is now exploded out here a little bit, and we have some emphasis on Python here. Now that point one that we passed in to that explode, whenever I said that represents how far it is from the radius, that point one just means that it is 10% of the radius, exploded out here. If we were to do, like, a point 5, then that would be really big, and that would be half of the radius that it is exploded out. So I'll do a point 5 and run that. We can see that now it's exploded out by half of the radius. The point here is at half. But I think that's way too large, so let's go back to point 1. I think point 1 looks pretty good. So let me close both of those down. Okay. So there are a few more arguments that we can pass into our PY method that you might find useful. So let's take a look at some of these. Now one of these is just for aesthetics, but we can add a shadow to our chart by passing in an argument of shadow equals true. So right after explode here, I'll just say shadow equals true. And if we run that, then we can see that now this looks a little, 3 d here. We have a little shadow along the edges, along our, slice that's exploded out here. It just kinda makes it pop out a little bit. Now another argument that we can pass in is the starting angle. And if you want to change exactly how the chart is rotated, then you can play around with this. So for example, if I was to say, start angle is equal to, let's say, 90 degrees. So I will save that and run it. And now we can see that this chart was rotated a little bit. I think it picks an arbitrary",
        "video_title": "Matplotlib Tutorial (Part 3): Pie Charts",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_6",
        "text": "We have a little shadow along the edges, along our, slice that's exploded out here. It just kinda makes it pop out a little bit. Now another argument that we can pass in is the starting angle. And if you want to change exactly how the chart is rotated, then you can play around with this. So for example, if I was to say, start angle is equal to, let's say, 90 degrees. So I will save that and run it. And now we can see that this chart was rotated a little bit. I think it picks an arbitrary angle, to plot at first. But when we set this equal to 90, we can see that now our first value of JavaScript here starts at a 90 degree angle here, and then this goes all the way around to the last item in our list here, which is Java. So if we really wanted to emphasize Python, then we could play around with that angle and get it to show up exactly how we like. So that's what start angle does. Okay. And lastly, if we want to actually display the percentage that each slice is taking up in our pie chart, then we can add in an argument for that as well. Now, this syntax is going to look a little strange. I always need to look this up in the documentation when I do this. But to do this, we can say let me, actually go on a new line here. So to do this, we can say auto pct, so auto percent is equal to, and now we're passing in a format string here. So this is going to be a percent sign, 1.1 f%, percent percent. And again, I know that syntax looks a little bit strange there, but that is the format string for how we specify a percentage. So if I save that and run it oops. And I forgot my comma there, so we had a syntax error. If I save that and run it, then now we can see that we have the percentages here within our pie chart telling us how big of a piece of the pie, each of these values takes up. So that's pretty much the basics of a pie chart. They're really nice for just getting a quick overview of the data like this and what values take up what percentage of the whole. But like I said, if you have more values than 5, then I would recommend using a horizontal bar chart or any or a vertical bar chart, depending on your data. But the pie chart is definitely, an option that you have. Okay. So we're just about finished up here. But before we end, I'd like to also mention the sponsor of this video, and that is brilliant.org. So in this series, we've been learning about matplotlib and how to plot data in Python, and Brilliant would be an excellent way to supplement what you learn here with their hands on courses. They have",
        "video_title": "Matplotlib Tutorial (Part 3): Pie Charts",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_7",
        "text": "if you have more values than 5, then I would recommend using a horizontal bar chart or any or a vertical bar chart, depending on your data. But the pie chart is definitely, an option that you have. Okay. So we're just about finished up here. But before we end, I'd like to also mention the sponsor of this video, and that is brilliant.org. So in this series, we've been learning about matplotlib and how to plot data in Python, and Brilliant would be an excellent way to supplement what you learn here with their hands on courses. They have some excellent courses covering the fundamentals of statistics, and these lessons do a deep dive on how to think about and analyze data correctly. They even use Python in their statistics courses and will quiz you on how to correctly analyze the data within the language. Their guided lessons will challenge you, but you also have the ability to get hints or even solutions if you need them. It's really tailored towards understanding the material. They've also recently released a programming with Python course, and they even have a coding environment built into their website so that you can run code directly in the browser. And that is a great way to compliment watching my tutorials because you can apply what you've learned in their active problem solving environment, and that helps to solidify that knowledge. So to support my channel and learn more about Brilliant, you can go to brilliant.orgforward/cms to sign up for free. And, also, the first 200 people that go to that link will get 20% off the annual premium subscription, and you can find that link in the description section below. Again, that's brilliant.orgforward/ cms. Okay. So I think that pretty much covers it for pie charts. I hope you feel like you got a good understanding of when you might use these and also how to customize these a bit to visualize your data exactly how you'd like. And in the next video, we're gonna be covering, stack plots, and some people call these area charts. It's very similar to a pie chart, but instead of looking at how things are proportioned at a single time, stack plots will allow us to see these, different proportions over time. So definitely be sure to check that out. But if anyone has any questions about what we covered in this video, then feel free to ask in the comments section below, and I'll do my best to answer those. And if you enjoy these tutorials and would like to support them, then there are several ways you can do that. The easiest way is simply like the video and give it a thumbs up. And, also, it's a huge help to share these videos with anyone who you think can find them useful. And if you have the means, you can contribute to Patreon, and there's a link to that page in the description section below. Be sure to subscribe for future videos, and thank you all for",
        "video_title": "Matplotlib Tutorial (Part 3): Pie Charts",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_8",
        "text": "comments section below, and I'll do my best to answer those. And if you enjoy these tutorials and would like to support them, then there are several ways you can do that. The easiest way is simply like the video and give it a thumbs up. And, also, it's a huge help to share these videos with anyone who you think can find them useful. And if you have the means, you can contribute to Patreon, and there's a link to that page in the description section below. Be sure to subscribe for future videos, and thank you all for watching.",
        "video_title": "Matplotlib Tutorial (Part 3): Pie Charts",
        "video_id": "Unknown ID"
    }
]