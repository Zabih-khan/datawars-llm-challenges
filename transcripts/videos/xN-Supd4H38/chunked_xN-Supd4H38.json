[
    {
        "chunk_id": "0",
        "text": "Hey there. How's it going everybody? In this video, we're gonna be going over stack plots, and you may have also heard these called area plots. They are very similar to pie charts in the sense that they show you how the portions of the different values contribute to the whole. But instead of doing this just once, like on a pie chart, a stack plot shows us this over time. So for example, in the last video, we looked at a pie chart that showed us the popularity of different programming languages"
    },
    {
        "chunk_id": "1",
        "text": "the popularity of different programming languages for a specific year. In this video, we'll show how that how we can make similar comparisons, but over a course of a certain time. Now real quick, I'd like to also mention that we do have a sponsor for this series of videos, and that is brilliant.org. So I really wanna thank Brilliant for sponsoring these videos, and it would be great if you all could check them out using the link in the starting code here that you might recognize if you're"
    },
    {
        "chunk_id": "2",
        "text": "code here that you might recognize if you're continuing from my other previous videos. But if you're not, let me give a quick overview of this code and what's going on. Okay. So up here at the top, I am importing pyplot from matplotlib. I am using the 538 style just to make our, plots look a little bit nicer. I'm going to gloss over this data just for now. That's the data that we're gonna plot in this series. We'll take a look at that in just a sec. Here we have, plt.py, so this makes a pie"
    },
    {
        "chunk_id": "3",
        "text": "a sec. Here we have, plt.py, so this makes a pie chart, and we'll look how the stack plots are different from pie charts here in just a second. Also we have a title for our plot here. We have a tight layout which just changes the padding a little bit and makes it look a little nicer. And also we have the plt.show that actually shows our plot. Now as usual, I'm gonna have this code and also the snippets code for this video available for download. That's in the description section below. So if"
    },
    {
        "chunk_id": "4",
        "text": "That's in the description section below. So if you wanna follow along, you can just go there and copy and paste it into your editor and follow along with this. Okay. So these stack plots are really good for data where you wanna track a total and also see the breakdown of that total by a specific category. So for example, let's say that you're playing a video game where you have teams, and you want to keep track of the total points for the whole team and also how many points each individual"
    },
    {
        "chunk_id": "5",
        "text": "team and also how many points each individual player has contributed. Now this is the kind of data that would be really great for a stack plot, and I've got an example of this kind of data, right here. So here's what this data represents. So we have a list here, a list of values of 1 through 9, and I have this labeled minutes. So this is the 1st minute of the game, 2nd minute, 3rd minute, 4th minute, so on. And for the player 123, their list is how many points they have scored, in the entire"
    },
    {
        "chunk_id": "6",
        "text": "how many points they have scored, in the entire game up to that point. So in the first minute, they all 3 scored a point. In the second minute, player 1 scored another point, so his total is 2, and so on. It goes all the way to the end. So if we were keeping track of the total points for the entire team in the first minute, then it would total 3, because you have one point from each player. But we we might also wanna see the breakdown of who scored those points. So in the 9th minute here, we"
    },
    {
        "chunk_id": "7",
        "text": "those points. So in the 9th minute here, we have a total of let's see. That's 9 plus 3, so 12 points total. But player 1 scored 5, player 2 scored 4, and player 3 scored 3. So if we wanted to see the distribution of who's scoring the points at just one point in time, then we could just use a pie chart like we saw in the last video. And I have an example pie chart already written out here to show this. So if we wanted to see the distribution of points in the first minute for our slices, I'm just"
    },
    {
        "chunk_id": "8",
        "text": "in the first minute for our slices, I'm just hard coding this in as a list of 111, which are the points all 3 players had in that first minute. And then I'm just giving them some labels of player 1, 2, and 3. So if I run this, then we can see it's a pretty simple pie chart. We just have an even distribution of 3 points here. But now let's use a stack plot to look at these distributions over an entire series of minutes. So to do this, I'm just going to erase my PIP plot there, and instead we're"
    },
    {
        "chunk_id": "9",
        "text": "to erase my PIP plot there, and instead we're going to create a stack plot. So we can do a stack pot plot by saying, plt dot stack plot. And first we want to pass in the x axis values that represent the progression. So in this case, that's the minutes. And if this was based on time, which we'll look at in a bit, then this could just be a list of years or something like that. So I'm gonna pass in those minutes. And now we can just pass in our list 1 by 1 as additional arguments. Now this can"
    },
    {
        "chunk_id": "10",
        "text": "list 1 by 1 as additional arguments. Now this can also be a multidimensional array if your data is arranged that way, But ours are currently individual 1 by in lists. So we're just gonna pass those in 1 at a time. So I'll pass pass in the player 1 list, the player 2 list, and lastly, the player 3 list. And that's all we need for a basic stack plot. So if I run this, then we can see here let me make this a little larger. This is what a stack plot looks like. So we can see our minutes down here,"
    },
    {
        "chunk_id": "11",
        "text": "looks like. So we can see our minutes down here, 1 through 9, and then each color breaks up the points scored by each individual player. So we can see here in the first minute that the total stack plot comes up to 3 here. But then if we look at how many each individual player has, then that's 1 a piece. So we can see here by the end of the game that this blue section here, we don't have labels for this yet, but the blue section contributes the most, and then this red, and then this yellow. And"
    },
    {
        "chunk_id": "12",
        "text": "and then this red, and then this yellow. And we can easy easily add in labels to our plot just by passing in a list of desired labels into the labels argument. So let's go back to our code here, and I'm just going to, say right above our stack plot here, I'm gonna say labels is equal to, and we will make a list of 3 here and I'm just going to copy in players 1, 2, 3 and put them here in these labels. And now in our stack plot, we can simply say labels is equal to that labels list. So oh, and"
    },
    {
        "chunk_id": "13",
        "text": "labels is equal to that labels list. So oh, and also, real quick, I almost forgot, we also need to actually say plt.legend, and, that will take those labels into account. So if I save that and run it, then now we can see that we get the legend for player 1, player 2, and player 3. Now the legend should try to pick the best location by default, but if ever ends up in a location where you don't like it, then we can always hard code in at that location. So in this case, I feel like the upper left"
    },
    {
        "chunk_id": "14",
        "text": "So in this case, I feel like the upper left here would always be the best location for this specific data that we currently have. If your data was declining instead of increasing, then you'd probably want it in the upper right, but I'm gonna hard code this to where it's in the upper left. So the way we can do that is within our legend method, we can simply say loc for location, and just pass in upper left as a string. So if I run that, then now we can see that looks a lot better. Now we have"
    },
    {
        "chunk_id": "15",
        "text": "we can see that looks a lot better. Now we have our legend up there in the top left of our stack plot. And just like some of the other plots we've seen, we can customize the colors the same way that we customize the labels by passing in a list of colors that correspond to the values that we want to have that color. So I have some custom hex colors down here at the bottom. So let's say that I wanted player 1 to be green, I wanted player 2 to be red, and I wanted player 3 to be blue. So I could"
    },
    {
        "chunk_id": "16",
        "text": "red, and I wanted player 3 to be blue. So I could create a colors list here, and let's pass in those hex values. So I have those copied. Let me see if those paste in in order, and they didn't. So let me change that real quick. So I want player 1 to be green, so so I'll paste that in. I want player 2 to be red, and I'll paste that in. And I want player 3 here to be blue. So now if I run that, then we can see oops. And that actually didn't work because I didn't add colors to our, list of"
    },
    {
        "chunk_id": "17",
        "text": "work because I didn't add colors to our, list of arguments here. So I need to pass in colors is equal to colors. So now this should work. Okay. So now we can see that our colors, look good. We have player 1 as green, player 2 as red, and player 3 as blue. Now another common use case for a stack plot is to visualize something that it, maintains a constant total. So what do I mean by that? Well, for example, let's say that you have a project and your team is only allowed to bill 8 hours to that"
    },
    {
        "chunk_id": "18",
        "text": "your team is only allowed to bill 8 hours to that project every day or something like that. So you could use a stack plot to track who's working on that project the most. So for example, let me grab, some code from my snippets, and I have my snippets file here. And then I will talk about what this means. And I'm also gonna have the snippets file available in the description section below if you would like to copy and paste this as well. So I'm just gonna overwrite our old values there. Now I'm"
    },
    {
        "chunk_id": "19",
        "text": "gonna overwrite our old values there. Now I'm keeping these variables here as players and minutes just for simplicity, but we can think of this as days and developers instead of players. So the example that I have here could be an example of someone handing off a project off to 2 other developers over a course of time. So each index for all of these developers adds up to a total of 8 hours, And one of the developers slowly fades out while the other 2, are taking over that project. Now that"
    },
    {
        "chunk_id": "20",
        "text": "other 2, are taking over that project. Now that might not be obvious just by looking at these numbers here, but that's why we have plots so that we can plot these sort of things out, and we can see it visually instead of needing to pour through the data manually. Now I know I'm running, or I know from running this earlier that the legend is going to be in a bad spot here in the upper left. So instead, I'm just gonna move this to the lower left. So instead of upper left, I'm gonna say lower"
    },
    {
        "chunk_id": "21",
        "text": "So instead of upper left, I'm gonna say lower left. And now let me plot out this new data. So let me make this a little larger here. Now we can see that the legend is still a little wonky. If you still don't like the location of the legend, then you can give it a more specific location by passing in coordinates to place the bottom left corner. And if you wanna see exactly how this works, then you can, Google Matplotlib legend, and it'll give you more details on how this works. But, basically,"
    },
    {
        "chunk_id": "22",
        "text": "more details on how this works. But, basically, if I go back to my legend here, instead of passing in a string, if I pass in a tuple so let me pass in a tuple. I'll just do 0.07 and 0.05. And, again, if you'd like to know exactly what that's doing, then you can Google matplotlib legend and take a more detailed look at exactly what those coordinates mean. But for now oops. But for now, let's just continue, looking at our stack plot here. So let me rerun this. Now I think that legend is in a"
    },
    {
        "chunk_id": "23",
        "text": "me rerun this. Now I think that legend is in a better location there. Let me make this a little larger. Basically, what that tuple meant was that we are putting the bottom left of the legend 7% from the bottom, or from the left, and 5% from the bottom. So we can see that now we can kind of visualize that data a little bit better, and see how one person's time fades out as the other 2 slowly add on. So we have player 1 here, which was our developer, who had a full 8 hours on this project in the"
    },
    {
        "chunk_id": "24",
        "text": "who had a full 8 hours on this project in the 1st day here. And then as he moved on, he had 6 in the 2nd day. It looks like the other 2 picked up 1 hour at a time here. And then slowly, it looks like, the red player 2 here, developer 2, picked up more time in this project than player 3, but then at the end, they both have 4 hours apiece. So that's an overview of how these stack plots will work and the types of data that you would use with these stack plots. Like I said, it's great for"
    },
    {
        "chunk_id": "25",
        "text": "these stack plots. Like I said, it's great for visualizing these things over a certain amount of time and breaking down the total into individual parts over that course of time. Okay. So we're just about finished up here, but before we end, I'd like to mention the sponsor of this video, and that is brilliant.org. Brilliant is a problem solving website that helps you understand underlying concepts by actively working through guided lessons. They have computer science courses ranging from"
    },
    {
        "chunk_id": "26",
        "text": "They have computer science courses ranging from algorithms and data structures to machine learning and neural networks. They even have a coding environment built into their website so that you can run code directly in the browser. And that's a great way to compliment watching my tutorials because you can apply what you've learned in their active problem solving environment, and that helps to solidify that knowledge. Their guided lessons will challenge you, but you also have the ability to get"
    },
    {
        "chunk_id": "27",
        "text": "you, but you also have the ability to get hints or even solutions if you need them. It's really tailored towards understanding that material. So their computer science material is fantastic, and I really like what they're doing. They also have plenty of courses depending on what you're most interested in. So they have courses in different fields of mathematics or astronomy, solar energy, computational biology, and all kinds of other great content. So to support my channel and learn more about"
    },
    {
        "chunk_id": "28",
        "text": "So to support my channel and learn more about Brilliant, you can go to brilliant.orgforward/ cms to sign up for free. And, also, the first 200 people that go to that link will get 20% off the annual premium subscription, And you can find that link in the description section below. And, again, that's brilliant.orgforward/cms. Okay. So I think that is gonna do it for this video. I hope you feel like you got a good idea for when you use a stack plot and how this can be useful. I see these in"
    },
    {
        "chunk_id": "29",
        "text": "plot and how this can be useful. I see these in different analytics all the time. So for example, the YouTube analytics will use these for our video views and traffic sources and things like that. So it would use a plot like this to show you your total views, but then it could also break down those total views broken up into, you know, traffic coming from recommended videos versus the homepage versus external sources and things like that. So there's, definitely a lot of real world use cases for"
    },
    {
        "chunk_id": "30",
        "text": "definitely a lot of real world use cases for these types of stack plots. Now Now in the next video, we're gonna be learning how to use fill betweens to enhance our line plots that we saw previously in the series. Fill betweens not only make our line plots look more professional, but we can also add in some conditionals that will color code values above or below a certain threshold. So definitely be sure to check that out. But But if anyone has any questions about what we covered in this video,"
    },
    {
        "chunk_id": "31",
        "text": "questions about what we covered in this video, then feel free to ask in the comment section below, and I'll do my best to answer those. And if you enjoy these tutorials and would like to support them, then there are several ways you can do that. The easiest way is simply like the video and give it a thumbs up. And also, it's a huge help to share these videos with anyone who you think would find them useful. And if you have the means, you can contribute through Patreon, and there's a link to"
    },
    {
        "chunk_id": "32",
        "text": "contribute through Patreon, and there's a link to that page in the description section below. Be sure to subscribe for future videos, and thank you all for watching."
    }
]