[
    {
        "chunk_id": "chunk_0",
        "text": "Hey there. How's it going everybody? In this video, we're gonna be plotting data that's continuously being generated in real time. So these real time plots would be great for plotting data that is changing frequently subscriber counts or maybe you're reading in data from a sensor and want that immediate feedback. No matter what you're doing, you're likely gonna find a use for something like this. So first, we're gonna look at a basic example where I plot some data that's directly in my Python script so that we can wrap our heads around how this is working, and then we'll look at a real world example where we're actually monitoring a CSV file. Now if you're pulling data from a real time API or a sensor of some kind, then it's pretty common to write those results to a CSV file. So we'll monitor that for changes and make updates to our plot when there's new data available. Now I would like to mention that we do have a sponsor for this series of videos, and that is brilliant.org. So I really wanna thank Brilliant for sponsoring the series, and it would be great if you all could check them out using the link in the description section below and support our sponsors. And I'll talk more about their services in just a bit. So with that said, let's go ahead and get started. Okay. So I've got some sample code pulled up here in my script. So first, we'll look at these real time plots using this list of data directly in my script, and then we'll look at a real world example with data that I'll load in from a CSV file. Now if you've been following along with the series, then you'll likely recognize the other matplotlib code that I have here at the moment. But if not, let me go over this real quick just in case. Okay. So I have a few imports here at the top. I'm importing the random module, the count function from Iter Tools. We'll go over how we're using those here in just a second. I'm importing pandas here. We're importing pyplot from matplotlib. We are setting our plot styles to use the 538 style just so these look a little nicer. Now this entire section here is just the data that we're gonna be plotting just to get get our heads wrapped around how this is working right now. We'll look at that here in a second. And finally, here at the bottom, we are doing plt.tightlayout to add some automatic padding to our plots, and plt.show will just show us our plots. And as usual, I'm gonna have a link in the description section below to all of this code here if you would like to download that or copy and paste it into your editor so that you can follow along with this, video. Okay. So first off, we're used to using static plots that we've already seen in this series before. So for example, I have,",
        "video_title": "Matplotlib Tutorial (Part 9): Plotting Live Data in Real-Time",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_1",
        "text": "We'll look at that here in a second. And finally, here at the bottom, we are doing plt.tightlayout to add some automatic padding to our plots, and plt.show will just show us our plots. And as usual, I'm gonna have a link in the description section below to all of this code here if you would like to download that or copy and paste it into your editor so that you can follow along with this, video. Okay. So first off, we're used to using static plots that we've already seen in this series before. So for example, I have, an x and a y list here with values, and I'm plotting this with the plt.plot method, which is just going to make a basic line chart. So if I run that, then we can see that works. So that is pretty simple. But now let me delete the current data that we have in these lists, and I'll uncomment out this function that I have right here and explain what our desired outcome is. So let me remove, plt. Plot And for our x and y values, I'm just gonna set these to be empty lists. And now let me uncomment out our index and our function here. So for anyone who has never used the count function from the iterativeools library, basically, by default, it just counts up one number at a time, and each time we get the next value. So I have a function here called animate, and with this within this function, we are appending to our x values list and also our y values list. Now x values is just going to append a value that is just going to count up by 1, so it's just going to be sequential. And y values is appending a random number here between 15 or between 5. So let's say that we wanted to run this function every second and plot these values that are getting appended to our list. Well, how would we do that? So to do that, we can use the func animation class from the matplotlib animation module. So let me import that and we'll take a look at how this is done. So below our other imports here, I'm gonna say from matplotlib.animationimport func animation. And now down here below our function let me make sure I spelled all that correctly. Yep. So down here below our animate function, let's tell matplotlib that we want to run that function on a specific interval so we can plot that new data. So to do this, I can simply say, create a variable called Annie, and I'll say Annie is equal to func animation. And now we need to pass in a few arguments. So first, we need to pass in the figure that we want to animate. Now we'll learn more about figures in the next tutorial when we learn about subplots, but basically, we just need to pass in the figure from our current plot. And to do that, we can just say",
        "video_title": "Matplotlib Tutorial (Part 9): Plotting Live Data in Real-Time",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_2",
        "text": "we want to run that function on a specific interval so we can plot that new data. So to do this, I can simply say, create a variable called Annie, and I'll say Annie is equal to func animation. And now we need to pass in a few arguments. So first, we need to pass in the figure that we want to animate. Now we'll learn more about figures in the next tutorial when we learn about subplots, but basically, we just need to pass in the figure from our current plot. And to do that, we can just say plt.gcf, which is get current figure. Okay. And next, we need to pass in the function that we want to run for our animation. So that was the animate function and also the interval for how often we want to run this function. The interval is in milliseconds, so if you want one second, then you can pass in 1,000. And I think one second would be good for us in this video, but you can change that depending on your data. So I'm gonna pass in an interval equal to 1,000, which is one second. Okay. So now matplotlib is going to run this animate function every second, but currently, we aren't plotting the data. So within the animate function, we're going to plot our x and our y lists. So I'm gonna say plt.plot, and we will plot out those x values, and we will also plot out those y values. Now if we run it like this, then it will somewhat work, but there's going to be one big problem. So let me run this, and I'll show you what that problem is. So if we run this, we can see that we get an updating chart, but you can see here that this is weird. We're getting all kinds, of different colors here. So let me close this and I'll explain what's going on here. So the reason it's doing that is because our plot method is actually plotting a brand new line every time, but it's not clearing out, the old lines. So there are actually multiple lines getting stacked on top of each other there, but they're just being covered up, so you can't really tell. So one way we could solve this is to simply clear out our axis. And if we, do that, then every time it plots that new line from scratch, we won't have that issue with the different colored lines because it's always gonna plot the same color. So to clear the axis, we can simply run the CLA method, which I'm assuming stands for clear axis. So I'm gonna put that right above our plot. So I'm gonna say plt.cla. And now if I run this, then we can see that this looks better. It's updating our plot with those, random values each time our animate function is run. Okay. So that's nice, but using random data, directly within our animate function doesn't really give us an idea of how",
        "video_title": "Matplotlib Tutorial (Part 9): Plotting Live Data in Real-Time",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_3",
        "text": "won't have that issue with the different colored lines because it's always gonna plot the same color. So to clear the axis, we can simply run the CLA method, which I'm assuming stands for clear axis. So I'm gonna put that right above our plot. So I'm gonna say plt.cla. And now if I run this, then we can see that this looks better. It's updating our plot with those, random values each time our animate function is run. Okay. So that's nice, but using random data, directly within our animate function doesn't really give us an idea of how this would help us plot real world data that's coming from an outside source. So let's take a look at how we would do that. So to do this, I'm going to plot data that's from a CSV, and this CSV is going to be constantly updated by an outside source. Now this source could be data that you pulled down from an online API and put it into a CSV file. It could be data that you're saving from a sensor, anything like that. It's very common, to save data from sources like that to a CSV file. Now the source for my CSV data is going to be a simple Python script that's going to be continuously adding values, but it doesn't really have much to do this with this video, so I'm not gonna go into a lot of detail, how that's adding that data. But if you'd like to see how I'm doing this, then I can open this script up really quick and just give a quick overview. So let me go over this really quick and show how I'm writing random data to a CSV file, in real time. So I'm importing the CSV module, random and time. We're setting some starting values here of 0 and then total 1 and total 2 equal to a 1,000. And then we're just using the built in CSV module for this stuff. So the field names here are gonna be the headers for the CSV file. We are opening that up and writing those headers. And then we're saying while true, so this is just gonna continuously run. We are opening up that data in append mode, so it's going to keep appending to the CSV. And we are creating a dictionary writer, and we are writing out this info here. And the info is all of the data for those headers. So we're writing that row. And then we're also printing this out to the console so that we can get some real time feedback in the console as well. And then lastly, we're updating the values. So I'm just incrementing by x values by 1 every time. Now your x values could be anything. They could be dates. They could be, you know, anything. And now for total 1, we are saying total 1 is equal to its old value, plus a random integer between negative 68. So I just wanted some variation there. It can",
        "video_title": "Matplotlib Tutorial (Part 9): Plotting Live Data in Real-Time",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_4",
        "text": "data for those headers. So we're writing that row. And then we're also printing this out to the console so that we can get some real time feedback in the console as well. And then lastly, we're updating the values. So I'm just incrementing by x values by 1 every time. Now your x values could be anything. They could be dates. They could be, you know, anything. And now for total 1, we are saying total 1 is equal to its old value, plus a random integer between negative 68. So I just wanted some variation there. It can either go down or it can go up, but it's got a better chance of going up. Total 2 is equal to total 2's old value at, plus or minus negative 5 to 6. So it can also go down or up, but it's more likely to go up as well. But there's also not as much variance in these random datas here. So that'll just kinda mix up the data for those two totals there. So that's how I'm writing in real time to our data dot CSV file. So that's the live data that we're gonna be monitoring, but, again, that could be live data from any source. It doesn't matter that it's coming from a Python script. It could be anything. So now let's see how to do this. So I've got some code commented out down here at the bottom, and this just reads in all of the data from that CSV file that we're gonna be monitoring. And if you've been following along with this series, then we've done this several times. But just in case, let me uncomment out this, and I will, show how to do this. So first, I'm gonna put this into our animate function, and then I will describe what's going on here. So I'm just gonna replace these old values that we were using, just to do some testing there. And now our new values here, we are reading in data. Csv, and that's going to be the data. Csv file that is getting live data written to it on a continuous basis. For our x value, we are grabbing the x value row. So that's gonna be all of the data for the x values in that CSV. Same for y one, we are just grabbing the total 1. For y 2, so we're gonna have 2 lines on this plot that we are monitoring. That is gonna be the total 2 column. So now since this is going to run that animate function every second, that means that it's also reading in the data from that CSV every second. Now we can simply plot that out. And when we plot this out, let's also give these labels so that we know which one is which using a legend. So let's pretend that these are, you know, YouTube subscriber counts and we're plotting the live counts of 2 different channels or something like that. So below our clear axis there,",
        "video_title": "Matplotlib Tutorial (Part 9): Plotting Live Data in Real-Time",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_5",
        "text": "plot that we are monitoring. That is gonna be the total 2 column. So now since this is going to run that animate function every second, that means that it's also reading in the data from that CSV every second. Now we can simply plot that out. And when we plot this out, let's also give these labels so that we know which one is which using a legend. So let's pretend that these are, you know, YouTube subscriber counts and we're plotting the live counts of 2 different channels or something like that. So below our clear axis there, I'm going to plot out first, I'm gonna plot out our y one. So pass in x for our x axis, y one for our y axis. Then I'm gonna give this a label, and I'll just call this channel 1. And now I'm going to copy this and also plot out a line for y 2, and I will call this channel 2. Now when we clear our axis, it's also going to clear our legend. So we're going to need to recreate that, and I will just do that down here at the bottom by saying plt.legend. And make sure you actually have that, indented here within your animate function. Now with live data coming in, I think it's usually best to specify an exact location for the legend. I've had it, you know, switch spots on me several times because, the data is being updated and it's a bit distracting. Because this tries to pick the best location by default, but if the data is constantly being updated, then it could be switched around on you. So I'm just gonna set a location here, and I'm gonna set this equal to the upper left of our plots, and you can change that based on your data. And, also, I usually put my tight layout method in here as well, so that each time it plots, it takes that into consideration. So I'm also going to put that here within my animate function as well. So I'll do tight layout and run that. Okay. And that should be all we need to monitor our CSV file. Now this file isn't created yet. So let me open up my terminal and I'm gonna run that script that's going to generate data for that CSV file. So I've got my terminal pulled up here. So now I'm going to, say Python and that script was called datagen.py. So I'm going to run that. And when I run that, it creates that CSV file. And now this is writing data to that CSV file, and it's gonna continue as long as we don't kill our operation here. So if we go back to our script, now that CSV is being updated with live data. So let's go to the script and see if this is picking up those real time changes. So I'm going to run our code here. And when I run this, you can see that that's already been running for",
        "video_title": "Matplotlib Tutorial (Part 9): Plotting Live Data in Real-Time",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_6",
        "text": "that script was called datagen.py. So I'm going to run that. And when I run that, it creates that CSV file. And now this is writing data to that CSV file, and it's gonna continue as long as we don't kill our operation here. So if we go back to our script, now that CSV is being updated with live data. So let's go to the script and see if this is picking up those real time changes. So I'm going to run our code here. And when I run this, you can see that that's already been running for some time and that these have already taken off. Now, so we can see that it's actually updating as that data is being written to that CSV file. Now let me, close this down for a sec and pull this back up in the terminal and stop this. And let me start this back over because, it was already kind of far along whenever we checked that last time. So now let me run this again, and now it's basically just started. So we can see that it just started writing data out to this CSV file. So it's picking up those live changes from that CSV file and plotting that data as it comes out. And this can be updated on any interval that you'd like. So if your data is only updated every 5 seconds or something like that, then you can change your interval so that it's only updating when you expect new data. That way, you don't have to check every second. So I was thinking that in the near future, maybe I'll put together a YouTube API tutorial using Python, and maybe we can actually see how to build a working version of something like this with real YouTube data. That would be a cool little project to do. So we can see here, I think, I gave my channel 1 a better chance of having better random values. And it was behind for the longest time, and now it's just constantly been going up. Okay. So we can close this down, but it's kind of fun to watch these, live plots, take off like this. So this was a pretty basic animation that we put together here using this live data, but there's a lot more that you can do depending on your needs. So for example, if you needed to run an initialize function for your animation, that sets things up one time before your animation, first runs. And then, to do that, the func animation class has an init func argument that you could pass in to do that. Or if you needed to pass in additional arguments to our animate function, then our, f or func animation class also has an f args argument to do that. So there's a lot more that you can do with this, and some of these animations can get pretty complex. I've seen some people use these for, drawings and math simulations and gravity simulations and all",
        "video_title": "Matplotlib Tutorial (Part 9): Plotting Live Data in Real-Time",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_7",
        "text": "your animation, that sets things up one time before your animation, first runs. And then, to do that, the func animation class has an init func argument that you could pass in to do that. Or if you needed to pass in additional arguments to our animate function, then our, f or func animation class also has an f args argument to do that. So there's a lot more that you can do with this, and some of these animations can get pretty complex. I've seen some people use these for, drawings and math simulations and gravity simulations and all kinds of neat stuff. Now there is a way that we could have updated our plot, without totally clearing out the axis, but it takes a bit more code since we'd have to also manually check our x and y limits and things like that, but it is possible to not clear out our axis here and just update the lines on the axis with the live data. So there's more than one way to do things like this, but I thought that this was, you know, good enough for this video. I think that this works well with the amount of data that we were looking at. Now Now if anyone wants to see the other more manual way, then I can also try to include that in the snippets for, this video when I upload those to GitHub. So you probably find those there if I don't forget. Okay. So that is the basics of running these cool little live plots. And we can see that now, when I run this, since we haven't cleared that out for a while, that, that data dot CSV file has just been continuously getting updated. So every time I run this, it's just, updating with the newest ones, but we still have over let's see. I think that updates that every second, so we have over 200 seconds of data here already. Okay. So we're just about finished up here. But before we end, I would like to mention the sponsor of this video, and that is brilliant dot org. So in this series, we've been learning about matplotlib and how to plot data in Python, and Brilliant would be an excellent way to supplement what you learn here with their hands on courses. They have some excellent courses covering the fundamentals of statistics, and these lessons do a deep dive on how to think about and analyze data correctly. They even use Python in their statistics courses and will quiz you on how to correctly analyze the data within the language. Their guided lessons will challenge you, but you also have the ability to get hints or even solutions if you need them. It's really tailored towards understanding the material. They've also recently released a programming with Python course, and they even have a coding environment built into their website so that you can run code directly in the browser. And that is a great way to compliment watching my tutorials because",
        "video_title": "Matplotlib Tutorial (Part 9): Plotting Live Data in Real-Time",
        "video_id": "Unknown ID"
    },
    {
        "chunk_id": "chunk_8",
        "text": "to think about and analyze data correctly. They even use Python in their statistics courses and will quiz you on how to correctly analyze the data within the language. Their guided lessons will challenge you, but you also have the ability to get hints or even solutions if you need them. It's really tailored towards understanding the material. They've also recently released a programming with Python course, and they even have a coding environment built into their website so that you can run code directly in the browser. And that is a great way to compliment watching my tutorials because you can apply what you've learned in their active problem solving environment, and that helps to solidify that knowledge. So to support my channel and learn more about Brilliant, you can go to brilliant.orgforward/cms to sign up for free. And, also, the first 200 people that go to that link will get 20% off the annual premium subscription, and you can find that link in the description section below. Again, that's brilliant.orgforward/cms. Okay. So I think that is gonna do it for this video. I hope you feel like you got a good idea for how these animations work and how you can use that to plot real time data. I definitely think this is one of the coolest things that we can do with Matplotlib. It opens up a lot of possibilities in terms of how we can plot data from APIs or sensors and get immediate feedback like this. Now in the next video, we're gonna be going over subplots. So so far in this series, we've simply been creating our plots with the pyplot object, and that works great for what we've done so far. But if you want additional plots or subplots, then it's best to create your plots with the subplots method. So definitely be sure to check out that video. But if anyone has any questions about what we covered in this video, then feel free to ask in the comment section below, and I'll do my best to answer those. If you enjoy these tutorials and would like to support them, then there are several ways you can do that. The easiest way is to simply like the video and give it a thumbs up. And, also, it's a huge help to share these videos with anyone who you think would find useful. And if you have the means, you can contribute through Patreon, and there's a link to that page in the description section below. Be sure to subscribe for future videos, and thank you all for watching.",
        "video_title": "Matplotlib Tutorial (Part 9): Plotting Live Data in Real-Time",
        "video_id": "Unknown ID"
    }
]