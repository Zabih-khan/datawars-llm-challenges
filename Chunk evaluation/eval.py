import json
from sklearn.metrics import precision_recall_fscore_support
import random

def load_chunks(file_path):
    """Load chunked data from a JSON file."""
    with open(file_path, 'r') as file:
        chunks = json.load(file)
    return chunks

def evaluate_relevancy(chunks, sample_size=10):
    """Evaluate the relevancy of chunks based on manual review."""
    sample_chunks = random.sample(chunks, min(sample_size, len(chunks)))
    
    for chunk in sample_chunks:
        print(f"Chunk ID: {chunk['chunk_id']}")
        print(f"Title: {chunk['title']}")
        print(f"Text: {chunk['text'][:500]}...")  # Print first 500 characters for review
        print()

def evaluate_correctness(chunks):
    """Evaluate the correctness of chunks by comparing them with original transcripts."""
    # Load original transcripts for comparison (assuming you have a method to retrieve them)
    # original_transcripts = load_original_transcripts()
    
    # For demonstration purposes, we'll compare chunk texts to some expected content
    # This part will need to be adapted based on your actual evaluation criteria
    expected_text = "Hey there. How's it going everybody? In this video, we're gonna be looking over time series data and plotting dates in Matplotlib. Now there's a ton of data out there that contains date information, so knowing how to plot this properly is definitely gonna be a huge help when creating these graphs. So first, we're gonna look at some basic examples using some dates that I have directly here within my Python code, and then we'll see an example using data from a CSV file. And the data within the CSV file, are Bitcoin prices over a couple of weeks. Now I would like to mention that we do have a sponsor for this series of videos, and that is brilliant.org. So I really wanna thank Brilliant for sponsoring this series, and it would be great if you all could go check them out using the link in the description section below and support the sponsors. And I'll talk more about their services in just a bit. So with that said, let's go ahead and get started. Okay. So I've got some sample code pulled up here in my script. So first, we'll look at these time series plots using this list of data directly in my script, and then we'll look at a real world example with data that I'll load in from a CSV file. Now if you've been following along with the series, then you'll likely recognize a lot of the other matplotlib code that I have here at the moment. But if not, then let me go over all this real quick. So here at the top, we have some imports. So we're importing pandas. We're also importing, datetime from the standard library We are importing pyplot from matplotlib, and we're also importing, dates from matplotlib. And we're importing that as npldates, because I was afraid I was going to, override it with a variable like I did here called this dates. Anyways, we are also using a style here. We're using seaborne style with matplotlib. These are the data that we're gonna be using, but I'm gonna gloss over this for now and just point out the rest of this code here. We have a plt.tight layout here that adds a padding to our plot, and plt.show will just show us our plot. And we'll go over this other data once we are actually ready to plot that. And as usual, all of this is gonna be available for download on my GitHub, and there's a link to that in the description section below if anyone would like to copy and paste this into their editor and follow along with this series. Okay. So for my sample data here, I've got a list of 7 dates, and I'm using Python's built in datetime module to create these. So these are just 7 days back to back. And then below, I've got a y variable here for our y axis, And this is just a list of 7 random values. So to plot these dates, we can simply say, down here below our y axis, plt.plot. And we want to do oops. That is plot date. And we want dates to be the x axis, and we want y to be the y axis. So if I run this, then we can see here that it plots those out. Now if you get some warnings in your output down here, then don't worry about that. Mine is just warning me about some future change in pandas that will be taking place. But we can see that we get those dates and values plotted out. Now I'm not sure why, but by default, this plot has markers instead of being connected by a line. But we can fix that easily just by saying that we want the line style line style of this plot to be solid. So now if I run that I wanna make this small again now that we've seen that warning. So now we can see that these are now connected by a line. And if you wanted to, then you could also go ahead and turn off these markers by setting marker to none, but I'm going to go ahead and leave those here for now. Okay. So now that we have some dates to work with, let's look at some different ways that we can format our plot to make this look a bit better. So one way that we can do this is to run the auto format x date method on our figure, and this will rotate our dates so that they fit a bit nicer and change their alignments and things like that. Now we haven't talked much about figures and axes in this series yet. That is gonna be in the subplots video in a couple more videos. But basically, this is going to be a method on our figure and not on this, pyplot object that we have been using. So to get the current figure from pyplot, we can say plt.gcf, which is get current figure. And now to run this auto format method, we can just run it on that current figure and say auto fmt for format, then underscore x date. Okay. So now if I run this, then we can see that now these dates, are rotated and they have different alignments. That just makes it so that these are, you know, not so bunched together and it makes it easier to read. Okay. So now that we've got that auto formatting in place, let's also see how we can change the format of our dates. So what if instead of how they're displayed now with the year, month, day, what if instead we wanted them to start with the name of the month and then the day and then the year? So to do this, we have to use some date time formatting. So to do this, I've already imported this line up here at the top, from matplotlib import dates as MPL dates. And from that imported module, we're gonna use the date formatter class, and we're gonna be passing in any format string that you could also pass into the strftime method from the datetime class. Now if you don't know how to format dates, then I do have a separate video on Python datetime, on the datetime module that goes into more detail about that. So I'll leave a link to that video in the description section below if anyone is interested in that. And I'll also leave a link to the Python documentation where you can find the formatting codes for the format that you're looking for. So for this example, let me write out the format that we want. So down here below where we, ran that get current figure, now I'm gonna say date underscore format is equal to MPL dates that's what we imported at the top and we're going to use the date formatter class from that imported module. And now we're gonna pass in our format string. And again, I'm gonna leave a link, in the description section below to the Python documentation where you can find these formatting codes. But I have mine written down here. I always need to look these up. But for the abbreviated name of the month, that is, percent sign lowercaseb, and then for the days, that's percent sign d, and then the year is percent sign, capital y to do all 4 digits of the year. And, again, I will leave a link to that documentation so that you can look up other formatting codes if you wanna change it up. So now we need to set this as the format for our x axis. So just like I grabbed the figure to run the auto format method, I'm going to need to grab the axis to run this format method. So to grab the current axis, it's a lot similar to getting the current figure. We'll say plt.gca, which is get current axis, and then we can format the x axis by saying dotxaxisdot set_major_formatter, and we will set that equal to our date format here. So now if I formatted that correctly, if I run this, then we can see that now we don't have that year month date that we had before. Now this is formatted to say May 24th, May 25th, May 26th, and so on. So you can format your dates however you like to show up in your chart. Okay. So now that we've seen how to work with date times using this simple example here, now let's look at some data that I have here in a CSV file and see if we can load that in and plot it. So let me remove what we have now and I'll uncomment this code that I have here at the bottom. So I'm going to, copy these two lines here where we are doing our plot date and also our auto format. So I'm going to cut those out so that I can paste them in later. And now I am going to remove from dates all the way down to where we, set that formatter. I just wanted to show how to format those dates, but, I'm not gonna format this next example. Okay. So now I'm going to uncomment out the other code that I have here, and we will explain what this is doing here in just a sec. But first, let me paste in, where we were plotting that data and also setting the auto format date there. Okay. So up here, we are loading in a CSV file here using Pandas. And if you've been following along with this series, then this probably looks familiar to you since we've loaded in CSV data a few times in the series so far. But just in case, let me go ahead and show you the CSV data and also go over how we're loading this in. So we are loading in the data from data dot CSV, and I have this pulled open here in the other tab. So this is the data that we're loading loading in. So these are the headers here. The first value is the date. The next value is the open price. The next value is the high price for that day, low price, close, adjusted close, and volume. And like I was saying, this is just Bitcoin data for about, I think 2 weeks or so. So, this I just pulled offline. And, actually, this line here at the bottom, that's not supposed to be there. I'm gonna add that in later. I just had that there for a while I was testing. Okay. So let me go back to the code and explain how we're loading this in. So when we read this in, it's loading this in as a Pandas data frame. And whenever we say price date is equal to data and then pass in that key of date, what it's doing is it's setting price date equal to all of these dates here. So it's basically setting it equal to that date column. Now when we do price close and set it to data close, I'm grabbing all of the closing prices for those days. So we've got the price date and the price close data loaded in from that CSV file. So to plot this, it's as easy as passing those into the plot date method. So I'm going to, pass in price date as the x, which is the first value here, and the price close will be the y value. So I will paste that in there. And if we run that, then we can see that we get that data plotted out. Now right now this might look okay, but it's not actually plotting out our x axis as dates. It's actually plotting these out as strings. So to show this, let me add a line to the end of the data of our CSV file, and I'm gonna add it out of order. So that's what, that line was there before whenever I was doing some testing. So what I'm gonna do is I'm just going to copy my top line here, and my top line is May 18th. So at the very bottom, I'm gonna paste in another line, and I'm gonna make this May 17th. And I'm just going to leave the prices and everything the same as the 1st day. So now if I run this, then we can see that we don't have a May 17th here at the beginning. It's putting it here at the end. So that doesn't really make any sense. Now, like I said, the reason it's doing this is because those are being read in as a string and not dates. So to fix this, we're actually gonna use some Pandas methods to set that, to a date, and then we'll also sort that as well. Now this isn't a Pandas tutorial, so I'm not gonna go into much detail here. But I just wanted to show this in case anyone is working with dates that are out of order. This is a pretty common thing to do is to need to, sort by dates by data that you're loading in. So to do this, underneath our data here, make a couple of blank lines. So I'm going to take this data date column here and I'm going to set that equal to, and I'm going to say that I want to do, pandas and then a method called to_datetime, and I want to convert that date column to a datetime. So what we're doing here is we are converting that date column to a date time using the to date time method from pandas, and then we are just replacing all those values, which are strings, with those converted date times. And now if we wanna sort that, then we can simply say data dot sort. And now that those are date times, we can just sort by date. And also, I want this to just sort in place, so I'm gonna say in place equals true. In place just basically means that it goes ahead and modifies that data instead of us needing to say, like, data equals data dot sort or something like that. So we don't have to do that since we're changing that in place. So now with those two changes there, if I save that and run it now, let me see if I'm getting an error for some reason. Date is not defined. Oh, you guys probably caught that as I was typing it, but I said date date. What I meant was data dot date. Did I make that mistake anywhere else? No. Okay. So let me try that. And, well, let's see. Well and I made another mistake here. Sorry about that. In a Pandas DataFrame, that is not sort. That is sort values. Sorry to confuse you all there. Hopefully, that is all the mistakes that I made. So now if I rerun that, then we can see let me take that output, down there a little bit. Now we can see that our date here at the beginning, we gave it the same value as the next day. So we can see that, now it's showing up here at the beginning instead of being put at the end. So that's how you're gonna work with date times, in Pandas using that plot date method. Like I said, it's a lot like any other line plot, but you're working with dates here. So there's a few different things with how the formatting works and things like that. But, basically, this is what you do for time series data in Matplotlib. Okay. So we're just about finished up here. But before we end, I'd like to mention the sponsor of this video, and that is brilliant.org. Brilliant is a problem solving website that helps you understand underlying concepts by actively working through guided lessons. They have computer science courses ranging from algorithms and data structures to machine learning and neural networks. They even have a coding environment built into their website so that you can run code directly in the browser. And that's a great way to compliment watching my tutorials because you can apply what you've learned in their active problem solving environment, and that helps to solidify that knowledge. Their guided lessons will challenge you, but you also have the ability to get hints or even solutions if you need them. It's really tailored towards understanding that material. So their computer science material is fantastic, and I really like what they're doing. They also have plenty of courses depending on what you're most interested in. So they have courses in different fields of mathematics or astronomy, solar energy, computational biology, and all kinds of other great content. So to support my channel and learn more about Brilliant, you can go to brilliant.orgforward/cms to sign up for free. And, also, the first 200 people that go to that link will get 20% off the annual premium subscription, and you can find that link in the Okay. So I think that's gonna do it for this video. I hope you feel like you got a good introduction to working with dates in matplotlib and how we'd plot that type of data. In the next video, we're gonna be learning how to plot live data in real time. Now these real time plots can be used in a lot of different applications for monitoring things that are constantly being changed or updated. So that can be data that you're pulling down from an online API or maybe something that you're reading from a sensor or something like that. There's a lot of different types of applications for that. So definitely be sure to check that out. But if anyone has any questions about what we covered in this video, then feel free to ask in the comment section below, and I'll do my best to answer those. And if you enjoy these tutorials and would like to support them, then there are several ways you can do that. The easiest way is to simply like the video and give it a thumbs up. And, also, it's a huge help to share these videos with anyone who you think would find them useful. And if you have the means, you can contribute through Patreon, and there's a link to that page in the description section below. Be sure to subscribe for future videos, and thank you all for watching."

    correct = 0
    total = len(chunks)
    
    for chunk in chunks:
        if expected_text in chunk['text']:
            correct += 1
    
    accuracy = correct / total
    print(f"Correctness Accuracy: {accuracy:.2%}")

def evaluate_chunks(file_path):
    """Perform all evaluations on the chunks."""
    chunks = load_chunks(file_path)
    
    print("Evaluating Relevancy...")
    evaluate_relevancy(chunks)
    
    print("Evaluating Correctness...")
    evaluate_correctness(chunks)

if __name__ == "__main__":
    # Path to the chunked data
    chunks_file = 'chunks_output/chunks.json'
    evaluate_chunks(chunks_file)
